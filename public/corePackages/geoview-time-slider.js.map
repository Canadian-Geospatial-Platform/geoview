{"version":3,"file":"corePackages/geoview-time-slider.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/footer-plugin.ts","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@mui+material@6.1.2_@emotion+react@11.13.3_@emotion+styled@11.13.0_@types+react@18.3.11_react-dom@18.3.1_react@18.3.1/node_modules/@mui/material/NativeSelect/NativeSelect.js","webpack://geoview-core/../geoview-time-slider/src/time-slider.tsx","webpack://geoview-core/../geoview-time-slider/src/time-slider-style.ts","webpack://geoview-core/../geoview-time-slider/src/time-slider-panel.tsx","webpack://geoview-core/../geoview-time-slider/src/index.tsx"],"sourcesContent":["import { TypeTabs } from '@/ui/tabs/tabs';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { logger } from '@/core/utils/logger';\n\n/** ******************************************************************************************************************************\n * Footer Plugin abstract class.\n */\nexport abstract class FooterPlugin extends AbstractPlugin {\n  // Store index of tab\n  value?: number;\n\n  // Store the footer props\n  footerProps?: TypeTabs;\n\n  /**\n   * Overridable function to create footer props content\n   * @returns TypeTabs The footer props content\n   */\n  onCreateContentProps(): TypeTabs {\n    // Override this to create the footer props..\n\n    // Return dummy content\n    return {\n      id: 'some-id',\n      value: this.value!,\n      label: 'Some label',\n      content: `<div>Content for Footer plugin on map id ${this.pluginProps.mapId} goes here...</div>`,\n    };\n  }\n\n  /**\n   * Called when a footer plugin is being added\n   */\n  onAdd(): void {\n    // Log\n    // No need to log, parent class does it well already via added() function.\n\n    // Set value to length of tabs(?)\n    this.value = this.mapViewer().footerBarApi.tabs.length;\n\n    // Create props\n    this.footerProps = this.onCreateContentProps();\n\n    // Create tab with the props\n    this.mapViewer().footerBarApi.createTab(this.footerProps);\n  }\n\n  /**\n   * Called when a footer plugin is being removed\n   */\n  onRemove(): void {\n    // Log\n    // No need to log, parent class does it well already via removed() function.\n\n    // Remove the footer tab\n    if (this.value && this.mapViewer()?.footerBarApi) this.mapViewer().footerBarApi.removeTab(this.footerProps!.id);\n  }\n\n  /**\n   * Called when a footer plugin has been selected in the tabs\n   */\n  // Added eslint-disable here, because we do want to override this method in children and keep 'this'.\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  onSelected(): void {\n    // Log\n    logger.logTraceCore('FOOTER-PLUGIN - onSelected');\n\n    // TODO: Refactor - Move 'onSelected' in AbstractPlugin class so that AppBar can eventually benefit as well?\n\n    // Nothing else here.. but inherited FooterPlugins might override this method to do stuff when they are selected!\n  }\n}\n","'use client';\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport NativeSelectInput from \"./NativeSelectInput.js\";\nimport formControlState from \"../FormControl/formControlState.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown.js\";\nimport Input from \"../Input/index.js\";\nimport useThemeProps from \"../styles/useThemeProps.js\";\nimport { getNativeSelectUtilityClasses } from \"./nativeSelectClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n  const {\n    className,\n    children,\n    classes: classesProp = {},\n    IconComponent = ArrowDropDownIcon,\n    input = defaultInput,\n    inputProps,\n    variant,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const ownerState = {\n    ...props,\n    classes: classesProp\n  };\n  const classes = useUtilityClasses(ownerState);\n  const {\n    root,\n    ...otherClasses\n  } = classesProp;\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, {\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: {\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined,\n        // We render a select. We can ignore the type provided by the `Input`.\n        ...inputProps,\n        ...(input ? input.props.inputProps : {})\n      },\n      ref,\n      ...other,\n      className: clsx(classes.root, input.props.className, className)\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;","import { useTheme } from '@mui/material/styles';\nimport { FormControl, InputLabel, NativeSelect } from '@mui/material';\nimport { Box } from 'geoview-core/src/ui';\nimport {\n  useTimeSliderLayers,\n  useTimeSliderStoreActions,\n} from 'geoview-core/src/core/stores/store-interface-and-intial-values/time-slider-state';\nimport { useLayerLegendLayers } from 'geoview-core/src/core/stores/store-interface-and-intial-values/layer-state';\nimport { LegendEventProcessor } from 'geoview-core/src/api/event-processors/event-processor-children/legend-event-processor';\nimport { getLocalizedValue, getLocalizedMessage } from 'geoview-core/src/core/utils/utilities';\nimport { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\nimport { logger } from 'geoview-core/src/core/utils/logger';\n\nimport { getSxClasses } from './time-slider-style';\nimport { ConfigProps } from './time-slider-types';\n\ninterface TimeSliderProps {\n  config: ConfigProps;\n  mapId: string;\n  layerPath: string;\n}\n\n/**\n * Creates a panel with time sliders\n *\n * @param {TimeSliderProps} props - Time slider properties\n * @returns {JSX.Element} the slider panel\n */\nexport function TimeSlider(props: TimeSliderProps): JSX.Element {\n  // Log\n  logger.logTraceRender('geoview-time-slider/time-slider', props);\n\n  const { cgpv } = window;\n  const { config, layerPath, mapId } = props;\n  const { react, ui } = cgpv;\n  const { useState, useRef, useEffect, useCallback } = react;\n  const {\n    Grid,\n    Slider,\n    Typography,\n    Checkbox,\n    Tooltip,\n    IconButton,\n    LockIcon,\n    LockOpenIcon,\n    ArrowLeftIcon,\n    PlayArrowIcon,\n    PauseIcon,\n    ArrowRightIcon,\n    SwitchRightIcon,\n    SwitchLeftIcon,\n  } = ui.elements;\n\n  const theme = useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const playIntervalRef = useRef<number>();\n\n  // References for play button\n  const sliderValueRef = useRef<number>();\n  const sliderDeltaRef = useRef<number>();\n\n  // Get actions and states from store\n  // TODO: evaluate best option to set value by layer path.... trough a getter?\n  const { setTitle, setDefaultValue, setDescription, setValues, setLocked, setReversed, setDelay, setFiltering } =\n    useTimeSliderStoreActions();\n  const displayLanguage = useAppDisplayLanguage();\n\n  // TODO: check performance as we should technically have one selector by constant\n  const {\n    title,\n    description,\n    defaultValue,\n    discreteValues,\n    step,\n    range,\n    minAndMax,\n    field,\n    fieldAlias,\n    filtering,\n    singleHandle,\n    values,\n    delay,\n    locked,\n    reversed,\n  } = useTimeSliderLayers()[layerPath];\n\n  // Get name from legend layers\n  const legendLayers = useLayerLegendLayers();\n  const name = LegendEventProcessor.findLayerByPath(legendLayers, layerPath).layerName;\n\n  // slider config\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER - mount');\n\n    // TODO: add mechanism to initialize these values during store onInitialize\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\n    if (title === undefined) setTitle(layerPath, getLocalizedValue(sliderConfig?.title, displayLanguage) || '');\n    if (description === undefined) setDescription(layerPath, getLocalizedValue(sliderConfig?.description, displayLanguage) || '');\n    if (locked === undefined) setLocked(layerPath, sliderConfig?.locked !== undefined ? sliderConfig?.locked : false);\n    if (reversed === undefined) setReversed(layerPath, sliderConfig?.reversed !== undefined ? sliderConfig?.reversed : false);\n    if (defaultValue === undefined) setDefaultValue(layerPath, sliderConfig?.defaultValue || '');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER - config layerPath', config, layerPath);\n\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\n    if (sliderConfig?.defaultValue) {\n      // update values based on slider's default value\n      const defaultValueIsArray = Array.isArray(sliderConfig?.defaultValue);\n      if (defaultValueIsArray) {\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue[0]).getTime(), new Date(sliderConfig?.defaultValue[1]).getTime()]);\n      } else if (range.includes(sliderConfig?.defaultValue)) {\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue).getTime()]);\n      } else {\n        setValues(layerPath, [new Date(range[0]).getTime()]);\n      }\n    }\n  }, [config, layerPath, range, setFiltering, setValues]);\n\n  const timeStampRange = range.map((entry: string | number | Date) => new Date(entry).getTime());\n\n  // Check if range occurs in a single day or year\n  const timeDelta = minAndMax[1] - minAndMax[0];\n  const dayDelta = new Date(minAndMax[1]).getDate() - new Date(minAndMax[0]).getDate();\n  const yearDelta = new Date(minAndMax[1]).getFullYear() - new Date(minAndMax[0]).getFullYear();\n  let timeframe: string | undefined;\n  if (dayDelta === 0 && timeDelta < 86400000) timeframe = 'day';\n  else if (yearDelta === 0) timeframe = 'year';\n\n  let timeMarks: number[] = [];\n  if (range.length < 4 && discreteValues) {\n    const interval = (new Date(range[range.length - 1]).getTime() - new Date(range[0]).getTime()) / 4;\n    timeMarks = [minAndMax[0], minAndMax[0] + interval, minAndMax[0] + interval * 2, minAndMax[0] + interval * 3, minAndMax[1]];\n  } else if (range.length < 6 || singleHandle) timeMarks = timeStampRange;\n  else {\n    timeMarks = [\n      minAndMax[0],\n      new Date(range[Math.round(range.length / 4)]).getTime(),\n      new Date(range[Math.round(range.length / 2)]).getTime(),\n      new Date(range[Math.round((3 * range.length) / 4)]).getTime(),\n      minAndMax[1],\n    ];\n  }\n\n  const sliderMarks = [];\n  for (let i = 0; i < timeMarks.length; i++) {\n    sliderMarks.push({\n      value: timeMarks[i],\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\n      label: timeframe\n        ? `${timeframe === 'day' ? new Date(timeMarks[i]).toTimeString().split(' ')[0] : new Date(timeMarks[i]).toISOString().slice(5, 10)}`\n        : new Date(timeMarks[i]).toISOString().slice(0, 10),\n    });\n  }\n\n  /**\n   * Moves the slider handle(s) back one increment\n   */\n  // TODO: move forward and move back share common behaviour, see how we can minimize code duplication\n  function moveBack(): void {\n    if (singleHandle && !discreteValues) {\n      const currentIndex = timeStampRange.indexOf(values[0]);\n      let newIndex: number;\n      if (timeStampRange[currentIndex] === minAndMax[0]) newIndex = timeStampRange.length - 1;\n      else newIndex = currentIndex - 1;\n      setValues(layerPath, [timeStampRange[newIndex]]);\n    } else if (singleHandle) {\n      const interval = (minAndMax[1] - minAndMax[0]) / 20;\n      const newPosition = values[0] - interval < minAndMax[0] ? minAndMax[1] : values[0] - interval;\n      setValues(layerPath, [newPosition]);\n    } else {\n      let [leftHandle, rightHandle] = values;\n\n      // If there is no interval set, use 1/10 of min max interval so when user use buttons it will work.\n      if (rightHandle - leftHandle === minAndMax[1] - minAndMax[0]) {\n        sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 10;\n        setValues(layerPath, [rightHandle - sliderDeltaRef.current, rightHandle]);\n        return;\n      }\n      if (!sliderDeltaRef.current) {\n        sliderDeltaRef.current = rightHandle - leftHandle;\n      }\n\n      // Check for edge cases and then set new slider values\n      if (locked && reversed) {\n        if (leftHandle === minAndMax[0]) leftHandle = rightHandle;\n        leftHandle -= sliderDeltaRef.current;\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\n      } else if (locked) {\n        rightHandle -= sliderDeltaRef.current!;\n        if (rightHandle < leftHandle) rightHandle = leftHandle;\n        if (rightHandle === leftHandle) [, rightHandle] = minAndMax;\n      } else {\n        if (rightHandle > sliderValueRef.current! && leftHandle === sliderValueRef.current) rightHandle = sliderValueRef.current;\n        else rightHandle -= sliderDeltaRef.current!;\n        if (rightHandle <= minAndMax[0]) [, rightHandle] = minAndMax;\n        leftHandle = rightHandle - sliderDeltaRef.current!;\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\n        if (leftHandle < sliderValueRef.current! && rightHandle > sliderValueRef.current!) leftHandle = sliderValueRef.current as number;\n      }\n      setValues(layerPath, [leftHandle, rightHandle]);\n    }\n  }\n\n  /**\n   * Moves the slider handle(s) forward one increment\n   */\n  // TODO: move forward and move back share common behaviour, see how we can minimize code duplication\n  function moveForward(): void {\n    if (singleHandle && !discreteValues) {\n      const currentIndex = timeStampRange.indexOf(values[0]);\n      let newIndex: number;\n      if (timeStampRange[currentIndex] === minAndMax[1]) newIndex = 0;\n      else newIndex = currentIndex + 1;\n      setValues(layerPath, [timeStampRange[newIndex]]);\n    } else if (singleHandle) {\n      const interval = (minAndMax[1] - minAndMax[0]) / 20;\n      const newPosition = values[0] + interval > minAndMax[1] ? minAndMax[0] : values[0] + interval;\n      setValues(layerPath, [newPosition]);\n    } else {\n      let [leftHandle, rightHandle] = values;\n\n      // If there is no interval set, use 1/10 of min max interval so when user use buttons it will work.\n      if (rightHandle - leftHandle === minAndMax[1] - minAndMax[0]) {\n        sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 10;\n        setValues(layerPath, [leftHandle, leftHandle + sliderDeltaRef.current]);\n        return;\n      }\n      if (!sliderDeltaRef.current) {\n        sliderDeltaRef.current = rightHandle - leftHandle;\n      }\n\n      // Check for edge cases and then set new slider values\n      if (locked && reversed) {\n        leftHandle += sliderDeltaRef.current!;\n        if (leftHandle >= rightHandle) [leftHandle] = minAndMax;\n      } else if (locked) {\n        if (rightHandle === minAndMax[1]) rightHandle = leftHandle;\n        rightHandle += sliderDeltaRef.current!;\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\n      } else {\n        if (leftHandle < sliderValueRef.current! && rightHandle === sliderValueRef.current) leftHandle = sliderValueRef.current;\n        else leftHandle += sliderDeltaRef.current!;\n        if (leftHandle >= minAndMax[1]) [leftHandle] = minAndMax;\n        rightHandle = leftHandle + sliderDeltaRef.current!;\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\n        if (rightHandle > sliderValueRef.current! && leftHandle < sliderValueRef.current!) rightHandle = sliderValueRef.current as number;\n      }\n      setValues(layerPath, [leftHandle, rightHandle]);\n    }\n  }\n\n  // #region USE EFFECT\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER - values filtering', values, filtering);\n\n    // If slider cycle is active, pause before advancing to next increment\n    if (isPlaying) {\n      if (reversed) playIntervalRef.current = window.setTimeout(() => moveBack(), delay);\n      else playIntervalRef.current = window.setTimeout(() => moveForward(), delay);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [values, filtering, reversed, locked]);\n\n  // When slider cycle is activated, advance to first increment without delay\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER - isPlaying', isPlaying);\n\n    if (isPlaying) {\n      if (reversed) moveBack();\n      else moveForward();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying]);\n  // #endregion\n\n  // #region HANDLE FUNCTIONS\n  function handleBack(): void {\n    sliderValueRef.current = reversed ? values[1] : values[0];\n    moveBack();\n  }\n\n  function handleForward(): void {\n    [sliderValueRef.current] = values;\n    moveForward();\n  }\n\n  function handleLock(): void {\n    clearTimeout(playIntervalRef.current);\n    setLocked(layerPath, !locked);\n  }\n\n  function handlePlay(): void {\n    clearTimeout(playIntervalRef.current);\n    sliderValueRef.current = reversed ? values[1] : values[0];\n    setIsPlaying(!isPlaying);\n  }\n\n  function handleReverse(): void {\n    clearTimeout(playIntervalRef.current);\n    setReversed(layerPath, !reversed);\n    if (isPlaying) {\n      if (reversed) moveBack();\n      else moveForward();\n    }\n  }\n\n  function handleTimeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    setDelay(layerPath, event.target.value as unknown as number);\n  }\n\n  function handleCheckbox(newValue: boolean): void {\n    setFiltering(layerPath, newValue);\n    if (!newValue) {\n      clearInterval(playIntervalRef.current);\n      setIsPlaying(false);\n    }\n  }\n  // #endregion\n\n  function returnLockTooltip(): string {\n    if (reversed) {\n      const text = locked\n        ? getLocalizedMessage('timeSlider.slider.unlockRight', displayLanguage)\n        : getLocalizedMessage('timeSlider.slider.lockRight', displayLanguage);\n      return text;\n    }\n    const text = locked\n      ? getLocalizedMessage('timeSlider.slider.unlockLeft', displayLanguage)\n      : getLocalizedMessage('timeSlider.slider.lockLeft', displayLanguage);\n    return text;\n  }\n\n  const handleSliderChange = useCallback(\n    (newValues: number | number[]): void => {\n      // Log\n      logger.logTraceUseCallback('TIME-SLIDER - handleSliderChange', layerPath);\n\n      clearTimeout(playIntervalRef.current);\n      setIsPlaying(false);\n      sliderDeltaRef.current = undefined;\n      setValues(layerPath, newValues as number[]);\n    },\n    [layerPath, setValues]\n  );\n\n  /**\n   * Create labels for values on slider\n   *\n   * @param {number} theValue - The value of the slider handle\n   * @returns {string} A formatted time string or ISO date string\n   */\n  const handleLabelFormat = useCallback(\n    (theValue: number): string => {\n      // Log\n      logger.logTraceUseCallback('TIME-SLIDER - handleLabelFormat', timeframe);\n\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\n      if (timeframe === 'day') return new Date(theValue).toTimeString().split(' ')[0].replace(/^0/, '');\n      if (timeframe === 'year') return new Date(theValue).toISOString().slice(5, 10);\n      return new Date(theValue).toISOString().slice(0, 10);\n    },\n    [timeframe]\n  );\n\n  return (\n    <Grid>\n      <div>\n        <Grid container sx={sxClasses.rightPanelBtnHolder}>\n          <Grid item xs={9}>\n            <Typography component=\"div\" sx={{ ...sxClasses.panelHeaders, paddingLeft: '20px', paddingTop: '10px' }}>\n              {`${title || name}`}\n              {timeframe !== undefined &&\n                ` (${timeframe === 'day' ? new Date(defaultValue).toLocaleDateString() : new Date(defaultValue).getFullYear()})`}\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <div style={{ textAlign: 'right', marginRight: '25px' }}>\n              <Tooltip\n                title={\n                  filtering\n                    ? getLocalizedMessage('timeSlider.slider.disableFilter', displayLanguage)\n                    : getLocalizedMessage('timeSlider.slider.enableFilter', displayLanguage)\n                }\n                placement=\"top\"\n                enterDelay={1000}\n              >\n                <Checkbox checked={filtering} onChange={(event: never, child: boolean): void => handleCheckbox(child)} />\n              </Tooltip>\n            </div>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\n            <Slider\n              key={values[1] ? values[1] + values[0] : values[0]}\n              sliderId={layerPath}\n              mapId={mapId}\n              style={{ width: '80%', color: 'primary' }}\n              min={minAndMax[0]}\n              max={minAndMax[1]}\n              value={values}\n              marks={sliderMarks}\n              step={discreteValues ? step || 0.1 : null}\n              onChangeCommitted={handleSliderChange}\n              onValueLabelFormat={handleLabelFormat}\n            />\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\n            {!singleHandle && (\n              <IconButton\n                className=\"buttonOutline\"\n                aria-label={returnLockTooltip()}\n                tooltip={returnLockTooltip()}\n                tooltipPlacement=\"top\"\n                onClick={() => handleLock()}\n              >\n                {locked ? <LockIcon /> : <LockOpenIcon />}\n              </IconButton>\n            )}\n\n            <IconButton\n              className=\"buttonOutline\"\n              aria-label={getLocalizedMessage('timeSlider.slider.back', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.back\"\n              tooltipPlacement=\"top\"\n              disabled={isPlaying || !filtering}\n              onClick={() => handleBack()}\n            >\n              <ArrowLeftIcon />\n            </IconButton>\n\n            <IconButton\n              className=\"buttonOutline\"\n              aria-label={\n                isPlaying\n                  ? (getLocalizedMessage('timeSlider.slider.pauseAnimation', displayLanguage) as string)\n                  : (getLocalizedMessage('timeSlider.slider.playAnimation', displayLanguage) as string)\n              }\n              tooltip={isPlaying ? 'timeSlider.slider.pauseAnimation' : 'timeSlider.slider.playAnimation'}\n              tooltipPlacement=\"top\"\n              disabled={!filtering}\n              onClick={() => handlePlay()}\n            >\n              {!isPlaying ? <PlayArrowIcon /> : <PauseIcon />}\n            </IconButton>\n\n            <IconButton\n              className=\"buttonOutline\"\n              aria-label={getLocalizedMessage('timeSlider.slider.forward', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.forward\"\n              tooltipPlacement=\"top\"\n              disabled={isPlaying || !filtering}\n              onClick={() => handleForward()}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n\n            <IconButton\n              className=\"buttonOutline\"\n              aria-label={getLocalizedMessage('timeSlider.slider.changeDirection', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.changeDirection\"\n              tooltipPlacement=\"top\"\n              onClick={() => handleReverse()}\n            >\n              {reversed ? <SwitchRightIcon /> : <SwitchLeftIcon />}\n            </IconButton>\n\n            <Box component=\"span\" sx={{ paddingLeft: '10px' }}>\n              <FormControl sx={{ width: '150px' }}>\n                <InputLabel variant=\"standard\">{getLocalizedMessage('timeSlider.slider.timeDelay', displayLanguage)}</InputLabel>\n                <NativeSelect\n                  defaultValue={delay}\n                  inputProps={{\n                    name: 'timeDelay',\n                    onChange: (event) => handleTimeChange(event),\n                  }}\n                >\n                  <option value={500}>0.5s</option>\n                  <option value={750}>0.75s</option>\n                  <option value={1000}>1.0s</option>\n                  <option value={1500}>1.5s</option>\n                  <option value={2000}>2.0s</option>\n                  <option value={3000}>3.0s</option>\n                  <option value={5000}>5.0s</option>\n                </NativeSelect>\n              </FormControl>\n            </Box>\n          </div>\n        </Grid>\n        {description && (\n          <Grid item xs={12}>\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\n              {description}\n            </Typography>\n          </Grid>\n        )}\n        {fieldAlias && (\n          <Grid item xs={12}>\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\n              {`${getLocalizedMessage('timeSlider.slider.temporalField', displayLanguage)}${fieldAlias} (${field})`}\n            </Typography>\n          </Grid>\n        )}\n      </div>\n    </Grid>\n  );\n}\n","import { Theme } from '@mui/material/styles';\n\n// ? I doubt we want to define an explicit type for style properties?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getSxClasses = (theme: Theme): any => ({\n  panelHeaders: {\n    fontSize: theme.palette.geoViewFontSize.lg,\n    fontWeight: '600',\n    marginBottom: '20px',\n  },\n  rightPanelBtnHolder: {\n    marginTop: '20px',\n    marginBottom: '9px',\n    boxShadow: '0px 12px 9px -13px #E0E0E0',\n  },\n});\n","import { TypeWindow } from 'geoview-core/src/core/types/global-types';\nimport { LayerListEntry, Layout } from 'geoview-core/src/core/components/common';\nimport {\n  TypeTimeSliderValues,\n  useTimeSliderLayers,\n  useTimeSliderSelectedLayerPath,\n  useTimeSliderStoreActions,\n} from 'geoview-core/src/core/stores/store-interface-and-intial-values/time-slider-state';\nimport { useMapVisibleLayers } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\nimport { useLayerLegendLayers } from 'geoview-core/src/core/stores/store-interface-and-intial-values/layer-state';\nimport { LegendEventProcessor } from 'geoview-core/src/api/event-processors/event-processor-children/legend-event-processor';\nimport { Box } from 'geoview-core/src/ui';\nimport { logger } from 'geoview-core/src/core/utils/logger';\nimport { TABS } from 'geoview-core/src/core/utils/constant';\n\nimport { ReactNode } from 'react';\nimport { TimeSlider } from './time-slider';\nimport { ConfigProps } from './time-slider-types';\n\ninterface TypeTimeSliderProps {\n  configObj: ConfigProps;\n  mapId: string;\n}\n\n/**\n * Time slider tab\n *\n * @param {TypeTimeSliderProps} props The properties passed to slider\n * @returns {JSX.Element} the time slider tab\n */\nexport function TimeSliderPanel(props: TypeTimeSliderProps): JSX.Element {\n  const { mapId, configObj } = props;\n  const { cgpv } = window as TypeWindow;\n  const { react } = cgpv;\n  const { useCallback, useMemo, useEffect } = react;\n\n  // get values from store\n  const visibleLayers = useMapVisibleLayers() as string[];\n  const timeSliderLayers = useTimeSliderLayers();\n  const selectedLayerPath = useTimeSliderSelectedLayerPath();\n  const { setSelectedLayerPath } = useTimeSliderStoreActions();\n  const legendLayers = useLayerLegendLayers();\n\n  /**\n   * handle Layer list when clicked on each layer.\n   * @param {LayerListEntry} layer layer clicked by the user.\n   */\n  const handleClickLayerList = useCallback(\n    (layer: LayerListEntry) => {\n      // Log\n      logger.logTraceUseCallback('TIME-SLIDER-PANEL - handleLayerList');\n\n      // Set the layer path\n      setSelectedLayerPath(layer.layerPath);\n    },\n    [setSelectedLayerPath]\n  );\n\n  /**\n   * Get dates for current filters\n   * @param {TypeTimeSliderValuesListEntry} timeSliderLayerInfo Time slider layer info.\n   */\n  const getFilterInfo = (timeSliderLayerInfo: TypeTimeSliderValues): string | null => {\n    if (timeSliderLayerInfo.filtering)\n      return timeSliderLayerInfo.values.length === 1\n        ? new Date(timeSliderLayerInfo.values[0]).toISOString().slice(0, 19)\n        : `${new Date(timeSliderLayerInfo.values[0]).toISOString().slice(0, 19)} - ${new Date(timeSliderLayerInfo.values[1])\n            .toISOString()\n            .slice(0, 19)}`;\n    return null;\n  };\n\n  // Reacts when the array of layer data updates\n  const memoLayersList = useMemo(() => {\n    // Log\n    logger.logTraceUseMemo('TIME-SLIDER-PANEL - memoLayersList', timeSliderLayers);\n\n    /**\n     * Create layer tooltip\n     * @param {TypeTimeSliderValues} timeSliderLayerInfo Time slider layer info.\n     * @param {string} name Time slider layer name.\n     * @returns\n     */\n    const getLayerTooltip = (timeSliderLayerInfo: TypeTimeSliderValues, name: string): ReactNode => {\n      return (\n        <Box sx={{ display: 'flex', alignContent: 'center', '& svg ': { width: '0.75em', height: '0.75em' } }}>\n          {name}\n          {timeSliderLayerInfo.filtering && `: ${getFilterInfo(timeSliderLayerInfo)}`}\n        </Box>\n      );\n    };\n\n    // Return the layers\n    return visibleLayers\n      .map((layerPath) => {\n        return { layerPath, timeSliderLayerInfo: timeSliderLayers[layerPath!] };\n      })\n      .filter((layer) => layer && layer.timeSliderLayerInfo)\n      .map((layer) => {\n        return {\n          layerName: LegendEventProcessor.findLayerByPath(legendLayers, layer.layerPath).layerName,\n          layerPath: layer.layerPath,\n          layerFeatures: getFilterInfo(layer.timeSliderLayerInfo),\n          tooltip: getLayerTooltip(\n            layer.timeSliderLayerInfo,\n            LegendEventProcessor.findLayerByPath(legendLayers, layer.layerPath).layerName\n          ),\n          layerStatus: 'loaded',\n          queryStatus: 'processed',\n          layerUniqueId: `${mapId}-${TABS.TIME_SLIDER}-${layer.layerPath}`,\n        } as LayerListEntry;\n      });\n  }, [legendLayers, timeSliderLayers, visibleLayers, mapId]);\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER-PANEL - memoLayersList', memoLayersList, selectedLayerPath);\n\n    // If the selected layer path isn't in the list of layers possible, clear it\n    if (selectedLayerPath && !memoLayersList.map((layer: { layerPath: string }) => layer.layerPath).includes(selectedLayerPath)) {\n      // Clear the selected layer path\n      setSelectedLayerPath('');\n    }\n  }, [memoLayersList, selectedLayerPath, setSelectedLayerPath]);\n\n  const handleGuideIsOpen = useCallback(\n    (guideIsOpen: boolean): void => {\n      if (guideIsOpen) {\n        setSelectedLayerPath('');\n      }\n    },\n    [setSelectedLayerPath]\n  );\n\n  /**\n   * Render the right panel content based on selected Layer path of time slider.\n   * NOTE: Here we return null, so that in responsive grid layout, it can be used as flag to render the guide for time slider.\n   * @returns {JSX.Element | null} JSX.Element | null\n   */\n  const renderContent = (): JSX.Element | null => {\n    if (selectedLayerPath) {\n      return <TimeSlider mapId={mapId} config={configObj} layerPath={selectedLayerPath} key={selectedLayerPath} />;\n    }\n\n    return null;\n  };\n\n  return (\n    <Layout\n      selectedLayerPath={selectedLayerPath}\n      onLayerListClicked={handleClickLayerList}\n      layerList={memoLayersList}\n      onGuideIsOpen={handleGuideIsOpen}\n      guideContentIds={['timeSlider']}\n    >\n      {renderContent()}\n    </Layout>\n  );\n}\n","import { TypeJsonObject, toJsonObject, Cast, AnySchemaObject } from 'geoview-core/src/core/types/global-types';\nimport { TimeDimension, DateMgt } from 'geoview-core/src/core/utils/date-mgt';\nimport { TypeTabs } from 'geoview-core/src/ui/tabs/tabs';\nimport { TimeSliderIcon } from 'geoview-core/src/ui';\nimport { FooterPlugin } from 'geoview-core/src/api/plugin/footer-plugin';\nimport { TimeSliderEventProcessor } from 'geoview-core/src/api/event-processors/event-processor-children/time-slider-event-processor';\n\nimport { TimeSliderPanel } from './time-slider-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-time-slider-panel.json';\nimport { SliderProps } from './time-slider-types';\n\nexport interface SliderFilterProps {\n  title: string;\n  description: string;\n  range: string[];\n  defaultValue: string;\n  minAndMax: number[];\n  field: string;\n  singleHandle: boolean;\n  values: number[];\n  filtering: boolean;\n  delay: number;\n  locked: boolean;\n  reversed: boolean;\n}\n\n/**\n * Time slider plugin\n */\nclass TimeSliderPlugin extends FooterPlugin {\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  override schema(): AnySchemaObject {\n    return schema;\n  }\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  override defaultConfig(): TypeJsonObject {\n    return toJsonObject(defaultConfig);\n  }\n\n  /**\n   * Translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      timeSlider: {\n        title: 'Time Slider',\n        panel: {\n          noLayers: 'No layers with temporal data',\n        },\n        slider: {\n          unlockRight: 'Unlock right handle',\n          unlockLeft: 'Unlock left handle',\n          lockRight: 'Lock right handle',\n          lockLeft: 'Lock left handle',\n          disableFilter: 'Disable Filtering',\n          enableFilter: 'Enable Filtering',\n          pauseAnimation: 'Pause animation',\n          playAnimation: 'Play animation',\n          back: 'Back',\n          forward: 'Forward',\n          changeDirection: 'Change animation direction',\n          timeDelay: 'Animation time delay',\n          temporalField: 'Temporal Field: ',\n        },\n      },\n    },\n    fr: {\n      timeSlider: {\n        title: 'Curseur Temporel',\n        panel: {\n          noLayers: 'Pas de couches avec des données temporelles',\n        },\n        slider: {\n          unlockRight: 'Déverrouiller la poignée droite',\n          unlockLeft: 'Déverrouiller la poignée gauche',\n          lockRight: 'Verrouiller la poignée droite',\n          lockLeft: 'Verrouiller la poignée gauche',\n          disableFilter: 'Désactiver le filtrage',\n          enableFilter: 'Activer le filtrage',\n          pauseAnimation: `Pause de l'animation`,\n          playAnimation: `Jouer l'animation`,\n          back: 'Retour',\n          forward: 'En avant',\n          changeDirection: `Changer la direction de l'animation`,\n          timeDelay: `Délai d'animation`,\n          temporalField: 'Champ temporel: ',\n        },\n      },\n    },\n  });\n\n  /**\n   * Overrides the creation of the content properties of this TimeSlider Footer Plugin.\n   * @returns {TypeTabs} The TypeTabs for the TimeSlider Footer Plugin\n   */\n  override onCreateContentProps(): TypeTabs {\n    // Set custom time dimension if applicable\n    this.configObj.sliders.forEach((obj: SliderProps) => {\n      if (obj.temporalDimension) {\n        const timeDimension: TimeDimension = {\n          field: obj.temporalDimension.field,\n          default: obj.temporalDimension.default,\n          unitSymbol: obj.temporalDimension.unitSymbol,\n          nearestValues: obj.temporalDimension.nearestValues,\n          range: DateMgt.createRangeOGC(obj.temporalDimension.range as unknown as string),\n          singleHandle: obj.temporalDimension.singleHandle,\n        };\n\n        // TODO: Check concurrency between plugin creation and setting temporal dimensions\n        // TO.DOCONT: I doubt that this (and few lines below) is a good place to set the temporal dimension on layers that might be\n        // TO.DOCONT: loading their metadata (and setting their own temporal dimension) at the same time as the plugin gets created.\n        // TO.DOCONT: Whichever call comes last will be overriding the setTemporalDimension set by the other concurrent task.\n        // TO.DOCONT: Fortunately, the time-slider plugin gets initialized 'late' as it's currently part of a footer, so they, most of the time,\n        // TO.DOCONT: always overwrite the config from the layer metadata which is probably what we want here.\n        // TP.DOCONT: It's risky, because if the Plugin gets created before the layer metadata is fully fetched and read,\n        // TO.DOCONT: the later will override the plugin settings (can be tested by adding fake delays).\n        // TO.DOCONT: If this Plugin has temporal dimension settings, for various layers, those should be set in synch with the layers\n        // TO.DOCONT: using event listeners, not at Plugin creation.\n        this.mapViewer().layer.getGeoviewLayerHybrid(obj.layerPaths[0])?.setTemporalDimension(obj.layerPaths[0], timeDimension);\n      }\n\n      // Set override default value under time dimension if applicable\n      if (obj.defaultValue) {\n        const layerPath = obj.layerPaths[0];\n        const timeDimension = this.mapViewer().layer.getGeoviewLayerHybrid(layerPath)?.getTemporalDimension(layerPath);\n\n        if (timeDimension) {\n          this.mapViewer()\n            .layer.getGeoviewLayerHybrid(layerPath)\n            ?.setTemporalDimension(layerPath, {\n              ...timeDimension,\n              default: obj.defaultValue,\n            });\n        }\n      }\n    });\n\n    return {\n      id: 'time-slider',\n      value: this.value!,\n      label: 'timeSlider.title',\n      icon: <TimeSliderIcon />,\n      content: <TimeSliderPanel mapId={this.pluginProps.mapId} configObj={this.configObj} />,\n    };\n  }\n\n  /**\n   * Overrides the addition of the TimeSlider Footer Plugin to make sure to set the time slider configs in the store and apply filters.\n   */\n  override onAdd(): void {\n    // If map layers are all 'loaded' already\n    if (this.mapViewer().mapLayersLoaded) {\n      // Layers are already 'loaded', initialize the time slider plugin\n      this.initTimeSliderPlugin();\n    } else {\n      // Wait for the layers to be 'loaded' so that their 'layerTemporalDimension' information is set ('techhnically, it's 'processed', but putting 'loaded' to better support layers migration)\n      this.mapViewer().onMapLayersLoaded(() => {\n        // Initialize the time slider plugin once all layers are 'loaded'\n        this.initTimeSliderPlugin();\n      });\n    }\n\n    // Call parent\n    super.onAdd();\n  }\n\n  /**\n   * Initializes the Time Slider Plugin once the layers are all 'processed'.\n   */\n  initTimeSliderPlugin(): void {\n    // Now the layerTemporalDimension should be good on the layers\n    const orderedLayerPaths = this.mapViewer().layer.getLayerEntryConfigIds();\n    const initialTimeSliderLayerPaths = this.#filterTimeSliderLayers(orderedLayerPaths);\n    if (initialTimeSliderLayerPaths) {\n      initialTimeSliderLayerPaths.forEach((layerPath) => {\n        // Get the config\n        const layerConfig = this.mapViewer().layer.getLayerEntryConfig(layerPath);\n\n        // Check and add time slider layer when needed\n        TimeSliderEventProcessor.checkInitTimeSliderLayerAndApplyFilters(this.pluginProps.mapId, layerConfig);\n      });\n    }\n  }\n\n  /**\n   * Filters an array of legend layers to get usable time slider layer paths\n   *\n   * @param {string} mapId The id of the map\n   * @param {TypeLegendLayer[]} legendLayers Array of legend layers to filter\n   * @returns {string[]} A list of usable layer paths\n   * @private\n   */\n  #filterTimeSliderLayers(layerPaths: string[]): string[] {\n    const filteredLayerPaths = layerPaths.filter((layerPath) => {\n      // Return the temporal dimension for the layer if any\n      return this.mapViewer().layer.getGeoviewLayerHybrid(layerPath)?.getTemporalDimension(layerPath);\n    });\n    return filteredLayerPaths;\n  }\n}\n\nexport default TimeSliderPlugin;\n\n// Keep a reference to the Time Slider Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['time-slider'] = Cast<TimeSliderPlugin>(TimeSliderPlugin);\n"],"names":["FooterPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","concat","_defineProperty","_inherits","_createClass","key","value","id","this","label","content","pluginProps","mapId","mapViewer","footerBarApi","tabs","footerProps","onCreateContentProps","createTab","_this$mapViewer","removeTab","logger","logTraceCore","AbstractPlugin","defaultInput","Input","NativeSelect","inProps","ref","props","useThemeProps","name","className","children","classes","classesProp","IconComponent","ArrowDropDown","A","input","inputProps","variant","other","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","useUtilityClasses","otherClasses","inputComponent","NativeSelectInput","type","undefined","clsx","muiName","TimeSlider","logTraceRender","cgpv","window","config","layerPath","react","ui","useState","useRef","useEffect","useCallback","_ui$elements","elements","Grid","Slider","Typography","Checkbox","Tooltip","IconButton","LockIcon","LockOpenIcon","ArrowLeftIcon","PlayArrowIcon","PauseIcon","ArrowRightIcon","SwitchRightIcon","SwitchLeftIcon","sxClasses","theme","panelHeaders","fontSize","palette","geoViewFontSize","lg","fontWeight","marginBottom","rightPanelBtnHolder","marginTop","boxShadow","getSxClasses","useTheme","_useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","playIntervalRef","sliderValueRef","sliderDeltaRef","_useTimeSliderStoreAc","useTimeSliderStoreActions","setTitle","setDefaultValue","setDescription","setValues","setLocked","setReversed","setDelay","setFiltering","displayLanguage","useAppDisplayLanguage","_useTimeSliderLayers$","useTimeSliderLayers","title","description","defaultValue","discreteValues","step","range","minAndMax","field","fieldAlias","filtering","singleHandle","values","delay","locked","reversed","legendLayers","useLayerLegendLayers","LegendEventProcessor","findLayerByPath","layerName","_config$sliders","logTraceUseEffect","sliderConfig","sliders","find","o","layerPaths","includes","getLocalizedValue","_config$sliders2","isArray","Date","getTime","timeframe","timeStampRange","map","entry","timeDelta","dayDelta","getDate","yearDelta","getFullYear","timeMarks","interval","Math","round","sliderMarks","i","push","toTimeString","split","toISOString","slice","moveBack","newIndex","currentIndex","indexOf","newPosition","_values","leftHandle","rightHandle","current","moveForward","_values2","returnLockTooltip","getLocalizedMessage","setTimeout","handleSliderChange","newValues","logTraceUseCallback","clearTimeout","handleLabelFormat","theValue","replace","_jsx","_jsxs","container","sx","item","xs","component","_objectSpread","paddingLeft","paddingTop","toLocaleDateString","style","textAlign","marginRight","placement","enterDelay","checked","onChange","event","child","newValue","clearInterval","sliderId","width","color","min","max","marks","onChangeCommitted","onValueLabelFormat","tooltip","tooltipPlacement","onClick","disabled","_values3","Box","FormControl","InputLabel","target","handleTimeChange","px","py","TimeSliderPanel","configObj","useMemo","visibleLayers","useMapVisibleLayers","timeSliderLayers","selectedLayerPath","useTimeSliderSelectedLayerPath","setSelectedLayerPath","handleClickLayerList","layer","getFilterInfo","timeSliderLayerInfo","memoLayersList","logTraceUseMemo","filter","layerFeatures","display","alignContent","height","layerStatus","queryStatus","layerUniqueId","TABS","TIME_SLIDER","handleGuideIsOpen","guideIsOpen","Layout","onLayerListClicked","layerList","onGuideIsOpen","guideContentIds","_TimeSliderPlugin_brand","WeakSet","TimeSliderPlugin","_FooterPlugin","_classPrivateMethodInitSpec","toJsonObject","en","timeSlider","panel","noLayers","slider","unlockRight","unlockLeft","lockRight","lockLeft","disableFilter","enableFilter","pauseAnimation","playAnimation","back","forward","changeDirection","timeDelay","temporalField","fr","schema","defaultConfig","_this2","forEach","obj","temporalDimension","_this2$mapViewer$laye","timeDimension","default","unitSymbol","nearestValues","DateMgt","createRangeOGC","getGeoviewLayerHybrid","setTemporalDimension","_this2$mapViewer$laye2","_this2$mapViewer$laye3","getTemporalDimension","icon","TimeSliderIcon","_this3","mapLayersLoaded","initTimeSliderPlugin","onMapLayersLoaded","_this4","orderedLayerPaths","getLayerEntryConfigIds","initialTimeSliderLayerPaths","_assertClassBrand","_filterTimeSliderLayers","call","layerConfig","getLayerEntryConfig","TimeSliderEventProcessor","checkInitTimeSliderLayerAndApplyFilters","_this5","_this5$mapViewer$laye","geoviewPlugins","Cast"],"sourceRoot":""}