{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-details-panel/src/details-item.tsx","webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport { ReactElement } from 'react';\n\nimport {\n  TypeWindow,\n  payloadIsAMapSingleClick,\n  markerDefinitionPayload,\n  payloadIsAllQueriesDone,\n  TypeArrayOfLayerData,\n  getLocalizedValue,\n  Coordinate,\n} from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n  buttonId?: string;\n}\n\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the details component\n *\n * @returns {JSX.Element} created details component\n */\nexport function DetailsItem({ mapId, buttonId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [list, setList] = useState<ReactElement>();\n  const [LngLat, setLngLat] = useState<Coordinate>([]);\n  const [handlerName, setHandlerName] = useState<string | null>(null);\n\n  const panel = api.map(mapId).appBarButtons.getAppBarButtonPanelById(buttonId === undefined ? '' : buttonId)?.panel;\n\n  useEffect(() => {\n    // create the listener to return the details\n    api.event.on(\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\n      (payload) => {\n        if (payloadIsAllQueriesDone(payload)) {\n          const { resultSets } = payload;\n          const newDetails: TypeArrayOfLayerData = [];\n          Object.keys(resultSets).forEach((layerPath) => {\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\n            const features = resultSets[layerPath]!;\n            if (features.length > 0) {\n              newDetails.push({ layerPath, layerName, features });\n            }\n          });\n          if (newDetails.length > 0) {\n            setDetails(newDetails);\n            // open the details panel\n            panel?.open();\n          } else {\n            setDetails([]);\n          }\n        } else {\n          setDetails([]);\n        }\n      },\n      `${mapId}/${mapId}-DetailsAPI`\n    );\n    // get click info.\n    api.event.on(\n      api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK,\n      (payload) => {\n        if (payloadIsAMapSingleClick(payload)) {\n          const { coordinates } = payload;\n          setHandlerName(payload.handlerName);\n          setLngLat(coordinates.lnglat);\n        } else {\n          setLngLat([]);\n        }\n      },\n      mapId\n    );\n\n    return () => {\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\n      api.event.off(api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setList(\n      api\n        .map(mapId)\n        .details.createDetails(mapId, details, { mapId, location: LngLat, backgroundStyle: 'dark', singleColumn: true, handlerName })\n    );\n    setTimeout(() => {\n      api.event.emit(markerDefinitionPayload(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_SHOW, handlerName, LngLat));\n    }, 800);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [details, LngLat]);\n\n  return <div>{list}</div>;\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  Cast,\n  AbstractPlugin,\n  toJsonObject,\n  TypeJsonObject,\n  TypeWindow,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeIconButtonProps,\n  TypePanelProps,\n  AnySchemaObject,\n} from 'geoview-core';\nimport { DetailsItem } from './details-item';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-details-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass DetailsPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      detailsPanel: 'Details',\n      nothing_found: 'Nothing found',\n      click_map: 'Choose a point on the map to start',\n      action_back: 'Back',\n    },\n    fr: {\n      detailsPanel: 'Détails',\n      nothing_found: 'Aucun résultat',\n      click_map: 'Choisissez un point sur la carte pour commencer',\n      action_back: 'Retour',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api, ui } = cgpv;\n    const { DetailsIcon } = ui.elements;\n    const { displayLanguage } = api.map(mapId);\n\n    // button props\n    const button: TypeIconButtonProps = {\n      id: 'detailsPanelButton',\n      tooltip: this.translations[displayLanguage].detailsPanel as string,\n      tooltipPlacement: 'right',\n      children: <DetailsIcon />,\n      visible: true,\n    };\n\n    // panel props\n    const panel: TypePanelProps = {\n      title: this.translations[displayLanguage].detailsPanel,\n      icon: '<i class=\"material-icons\">details</i>',\n      width: 350,\n    };\n\n    // create a new button panel on the app-bar\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n    // set panel content\n    this.buttonPanel?.panel?.changeContent(<DetailsItem mapId={mapId} buttonId={button.id} />);\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    if (this.buttonPanel) {\n      api.map(mapId as string).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n\nexport default DetailsPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['details-panel'] = Cast<AbstractPlugin>(DetailsPlugin);\n"],"names":["w","window","DetailsItem","mapId","buttonId","cgpv","api","react","useState","useEffect","details","setDetails","list","setList","LngLat","setLngLat","handlerName","setHandlerName","panel","map","appBarButtons","getAppBarButtonPanelById","undefined","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","layer","registeredLayers","features","length","push","open","MAP","EVENT_MAP_SINGLE_CLICK","payloadIsAMapSingleClick","coordinates","lnglat","off","createDetails","location","backgroundStyle","singleColumn","setTimeout","emit","markerDefinitionPayload","MARKER_ICON","EVENT_MARKER_ICON_SHOW","DetailsPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","detailsPanel","nothing_found","click_map","action_back","fr","pluginProps","DetailsIcon","ui","elements","displayLanguage","button","id","tooltip","translations","tooltipPlacement","children","visible","title","icon","width","buttonPanel","createAppbarPanel","changeContent","this","removeAppbarPanel","buttonPanelId","AbstractPlugin","plugins","Cast"],"sourceRoot":""}