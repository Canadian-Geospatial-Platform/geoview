{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-details-panel/src/details-item.tsx","webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport { ReactElement } from 'react';\n\nimport {\n  TypeWindow,\n  payloadIsAMapSingleClick,\n  markerDefinitionPayload,\n  payloadIsAllQueriesDone,\n  TypeArrayOfLayerData,\n  getLocalizedValue,\n  Coordinate,\n} from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n  buttonId?: string;\n}\n\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the details component\n *\n * @returns {JSX.Element} created details component\n */\nexport function DetailsItem({ mapId, buttonId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [list, setList] = useState<ReactElement>();\n  const [LngLat, setLngLat] = useState<Coordinate>([]);\n  const [handlerName, setHandlerName] = useState<string | null>(null);\n\n  const panel = api.map(mapId).appBarButtons.getAppBarButtonPanelById(buttonId === undefined ? '' : buttonId)?.panel;\n\n  useEffect(() => {\n    // create the listener to return the details\n    api.event.on(\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\n      (payload) => {\n        if (payloadIsAllQueriesDone(payload)) {\n          const { resultSets } = payload;\n          const newDetails: TypeArrayOfLayerData = [];\n          Object.keys(resultSets).forEach((layerPath) => {\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\n            const features = resultSets[layerPath]!;\n            if (features.length > 0) {\n              newDetails.push({ layerPath, layerName, features });\n            }\n          });\n          if (newDetails.length > 0) {\n            setDetails(newDetails);\n            // open the details panel\n            panel?.open();\n          } else {\n            setDetails([]);\n          }\n        } else {\n          setDetails([]);\n        }\n      },\n      `${mapId}/$FeatureInfoLayerSet$`\n    );\n    // get click info.\n    api.event.on(\n      api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK,\n      (payload) => {\n        if (payloadIsAMapSingleClick(payload)) {\n          const { coordinates } = payload;\n          setHandlerName(payload.handlerName);\n          setLngLat(coordinates.lnglat);\n        } else {\n          setLngLat([]);\n        }\n      },\n      mapId\n    );\n\n    return () => {\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\n      api.event.off(api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setList(\n      api\n        .map(mapId)\n        .details.createDetails(mapId, details, { mapId, location: LngLat, backgroundStyle: 'dark', singleColumn: true, handlerName })\n    );\n    setTimeout(() => {\n      api.event.emit(markerDefinitionPayload(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_SHOW, handlerName, LngLat));\n    }, 800);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [details, LngLat]);\n\n  return <div>{list}</div>;\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  Cast,\n  AbstractPlugin,\n  toJsonObject,\n  TypeJsonObject,\n  TypeWindow,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeIconButtonProps,\n  TypePanelProps,\n  AnySchemaObject,\n} from 'geoview-core';\nimport { DetailsItem } from './details-item';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-details-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass DetailsPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      detailsPanel: 'Details',\n      nothing_found: 'Nothing found',\n      click_map: 'Choose a point on the map to start',\n      action_back: 'Back',\n    },\n    fr: {\n      detailsPanel: 'Détails',\n      nothing_found: 'Aucun résultat',\n      click_map: 'Choisissez un point sur la carte pour commencer',\n      action_back: 'Retour',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api, ui } = cgpv;\n    const { DetailsIcon } = ui.elements;\n    const { displayLanguage } = api.map(mapId);\n\n    // button props\n    const button: TypeIconButtonProps = {\n      id: 'detailsPanelButton',\n      tooltip: this.translations[displayLanguage].detailsPanel as string,\n      tooltipPlacement: 'right',\n      children: <DetailsIcon />,\n      visible: true,\n    };\n\n    // panel props\n    const panel: TypePanelProps = {\n      title: this.translations[displayLanguage].detailsPanel,\n      icon: '<i class=\"material-icons\">details</i>',\n      width: 350,\n    };\n\n    // create a new button panel on the app-bar\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n    // set panel content\n    this.buttonPanel?.panel?.changeContent(<DetailsItem mapId={mapId} buttonId={button.id} />);\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    if (this.buttonPanel) {\n      api.map(mapId as string).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n\nexport default DetailsPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['details-panel'] = Cast<AbstractPlugin>(DetailsPlugin);\n"],"names":["w","window","DetailsItem","_ref","_api$map$appBarButton","mapId","buttonId","cgpv","api","react","useState","useEffect","_useState","_useState2","_slicedToArray","details","setDetails","_useState3","_useState4","list","setList","_useState5","_useState6","LngLat","setLngLat","_useState7","_useState8","handlerName","setHandlerName","panel","map","appBarButtons","getAppBarButtonPanelById","undefined","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","layer","registeredLayers","features","length","push","open","concat","MAP","EVENT_MAP_SINGLE_CLICK","payloadIsAMapSingleClick","coordinates","lnglat","off","createDetails","location","backgroundStyle","singleColumn","setTimeout","emit","markerDefinitionPayload","MARKER_ICON","EVENT_MARKER_ICON_SHOW","_jsx","children","DetailsPlugin","_AbstractPlugin","_inherits","_super","_createSuper","pluginId","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","schema","toJsonObject","defaultConfig","en","detailsPanel","nothing_found","click_map","action_back","fr","_this$buttonPanel","_this$buttonPanel$pan","pluginProps","DetailsIcon","ui","elements","displayLanguage","button","id","tooltip","translations","tooltipPlacement","visible","title","icon","width","buttonPanel","createAppbarPanel","changeContent","_createClass","key","value","this","removeAppbarPanel","buttonPanelId","AbstractPlugin","plugins","Cast"],"sourceRoot":""}