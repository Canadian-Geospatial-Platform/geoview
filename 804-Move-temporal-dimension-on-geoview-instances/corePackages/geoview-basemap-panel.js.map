{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx"],"sourcesContent":["import {\n  toJsonObject,\n  TypeBasemapProps,\n  TypeJsonObject,\n  TypeJsonArray,\n  SelectChangeEvent,\n  TypeWindow,\n  TypeViewSettings,\n  mapViewProjectionPayload,\n  TypeBasemapOptions,\n  TypeValidMapProjectionCodes,\n} from 'geoview-core';\n\nconst w = window as TypeWindow;\n\ninterface BaseMapPanelProps {\n  mapId: string;\n  config: TypeJsonObject;\n}\n\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\n  const { mapId, config } = props;\n\n  const { cgpv } = w;\n  const myMap = cgpv.api.map(mapId);\n\n  const { api, react, ui } = cgpv;\n  const { Select, Card } = ui.elements;\n\n  const { useState, useEffect } = react;\n\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\n  const [activeBasemapId, setActiveBasemapId] = useState<string>('');\n  const [canSwichProjection] = useState(config.canSwichProjection);\n\n  const useStyles = ui.makeStyles((theme) => ({\n    basemapCard: {\n      backgroundColor: theme.palette.grey.A700,\n      color: theme.palette.primary.light,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundClip: 'padding-box',\n      border: `1px solid ${theme.basemapPanel.borderDefault}`,\n      borderRadius: 6,\n      boxShadow: 'none',\n      marginBottom: 16,\n      transition: 'all 0.3s ease-in-out',\n      '&:last-child': {\n        marginBottom: 0,\n      },\n      '& .MuiCardHeader-root': {\n        backgroundColor: theme.palette.grey.A700,\n        color: theme.basemapPanel.header,\n        fontSize: 14,\n        fontWeight: 400,\n        margin: 0,\n        padding: '0 12px',\n        height: 60,\n        width: '100%',\n        order: 2,\n      },\n      '& .MuiCardContent-root': {\n        order: 1,\n        height: 190,\n        position: 'relative',\n        padding: 0,\n        '&:last-child': {\n          padding: 0,\n        },\n        '& .basemapCardThumbnail': {\n          position: 'absolute',\n          height: '100%',\n          width: '100%',\n          objectFit: 'cover',\n          top: 0,\n          left: 0,\n        },\n        '& .basemapCardThumbnailOverlay': {\n          display: 'block',\n          height: '100%',\n          width: '100%',\n          position: 'absolute',\n          backgroundColor: theme.basemapPanel.overlayDefault,\n          transition: 'all 0.3s ease-in-out',\n        },\n      },\n      '&:hover': {\n        cursor: 'pointer',\n        borderColor: theme.basemapPanel.borderHover,\n        '& .MuiCardContent-root': {\n          '& .basemapCardThumbnailOverlay': {\n            backgroundColor: theme.basemapPanel.overlayHover,\n          },\n        },\n      },\n      '&.active': {\n        borderColor: theme.basemapPanel.borderActive,\n        '& .MuiCardContent-root': {\n          '& .basemapCardThumbnailOverlay': {\n            backgroundColor: theme.basemapPanel.overlayActive,\n          },\n        },\n        '&:hover': {\n          borderColor: 'rgba(255,255,255,0.75)',\n          '& .MuiCardContent-root': {\n            '& .basemapCardThumbnailOverlay': {\n              backgroundColor: 'rgba(0,0,0,0)',\n            },\n          },\n        },\n      },\n    },\n  }));\n  const classes = useStyles();\n\n  // TODO: change the path for getting projection on schema refactor\n  const projections: number[] =\n    (config.supportedProjections as TypeJsonArray).map((obj: TypeJsonObject) => obj?.projectionCode as number) || [];\n  const [mapProjection, setMapProjection] = useState(myMap.mapFeaturesConfig.map.viewSettings.projection);\n\n  /**\n   * Update the basemap with the layers on the map\n   *\n   * @param {string} id update the basemap on the map\n   */\n  const setBasemap = (basemapId: string) => {\n    // set the new basemap and update the active basemap variable\n    myMap.basemap.setBasemap(basemapId);\n    setActiveBasemapId(basemapId);\n  };\n\n  /**\n   *  Add basemaps from configuration for selected projection\n   *\n   * @param {number} projection the projection to create basemaps for\n   */\n  const createBasemapArray = async (projection: TypeValidMapProjectionCodes) => {\n    const basemapsArray = toJsonObject(\n      (config.supportedProjections as Array<TypeJsonObject>).find((obj: TypeJsonObject) => obj.projectionCode === projection)\n    );\n    let isInit = false;\n\n    // reset the basemaps array\n    api.map(mapId).basemap.basemaps = [];\n    setBasemapList([]);\n\n    // create the custom config basemap\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.customBasemaps.length; basemapIndex++) {\n      const customBasemap = basemapsArray.customBasemaps[basemapIndex] as TypeJsonObject;\n      const basemap = api.map(mapId).basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // custom basemap are provided set it by default (can't be set as basemap from geoview config)\n      if (basemap && basemapIndex === 0 && activeBasemapId === '') {\n        setBasemap(basemap.basemapId!);\n        isInit = true;\n      }\n    }\n\n    // create the core basemap\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.coreBasemaps.length; basemapIndex++) {\n      const basemapOptions = basemapsArray.coreBasemaps[basemapIndex] as TypeJsonObject;\n      // eslint-disable-next-line no-await-in-loop\n      const basemap = await api.map(mapId).basemap.createCoreBasemap(basemapOptions as unknown as TypeBasemapOptions, projection);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // set basemap if previously selected in previous projection\n      const id = `${basemapOptions.shaded ? 'shaded' : ''}${basemapOptions.id}${basemapOptions.labeled ? 'label' : ''}`;\n      if (basemap && id === activeBasemapId && !isInit) {\n        setBasemap(activeBasemapId);\n        isInit = true;\n      }\n    }\n\n    // if previous basemap does not exist in previous projection, init first one\n    if (!isInit) setBasemap(myMap.basemap.basemaps[0].basemapId as string);\n  };\n\n  /**\n   * Set new projection view and basemap array\n   *\n   * @param {SelectChangeEvent} event select change element event\n   */\n  const setSelectedProjection = (event: SelectChangeEvent<unknown>) => {\n    const projection = event.target.value as TypeValidMapProjectionCodes;\n\n    // set basemap to no geom to clean up the view\n    setBasemap('nogeom');\n    setMapProjection(projection as TypeValidMapProjectionCodes);\n\n    // get view status (center and projection) to calculate new center\n    const currentView = myMap.getView();\n    const currentCenter = currentView.getCenter();\n    const currentProjection = currentView.getProjection().getCode();\n    const newCenter = api.projection.transformPoints(currentCenter, currentProjection, 'EPSG:4326')[0];\n    const newProjection = event.target.value as TypeValidMapProjectionCodes;\n\n    const newView: TypeViewSettings = {\n      zoom: currentView.getZoom() as number,\n      minZoom: currentView.getMinZoom(),\n      maxZoom: currentView.getMaxZoom(),\n      center: newCenter as [number, number],\n      projection: newProjection,\n    };\n\n    // set new view and basemaps array (with selected basemap)\n    myMap.setView(newView);\n    createBasemapArray(projection);\n\n    // emit an event to let know map view projection as changed\n    api.event.emit(mapViewProjectionPayload(api.eventNames.MAP.EVENT_MAP_VIEW_PROJECTION_CHANGE, mapId, projection));\n  };\n\n  /**\n   * load existing basemaps and create new basemaps\n   */\n  useEffect(() => {\n    createBasemapArray(mapProjection);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {canSwichProjection && (\n        <Select\n          fullWidth\n          labelId=\"projection-label\"\n          value={mapProjection}\n          onChange={setSelectedProjection}\n          label=\"Projection\"\n          style={{\n            display: config.canSwichProjection ? 'flex' : 'none',\n          }}\n          inputLabel={{\n            id: 'projection-label',\n          }}\n          menuItems={projections.map((value: number) => ({\n            key: value,\n            item: {\n              value,\n              children: `EPSG:${value}`,\n            },\n          }))}\n        />\n      )}\n      {basemapList.map((basemap: TypeBasemapProps) => {\n        return (\n          <Card\n            tabIndex={0}\n            classes={{ root: classes.basemapCard }}\n            className={`${basemap.basemapId === activeBasemapId ? 'active' : ''}`}\n            onClick={() => setBasemap(basemap.basemapId as string)}\n            onKeyPress={() => setBasemap(basemap.basemapId as string)}\n            key={basemap.basemapId}\n            title={basemap.name}\n            content={\n              <>\n                {typeof basemap.thumbnailUrl === 'string' && (\n                  <img src={basemap.thumbnailUrl} alt={basemap.altText} className=\"basemapCardThumbnail\" />\n                )}\n                {Array.isArray(basemap.thumbnailUrl) &&\n                  basemap.thumbnailUrl.map((thumbnail, index) => {\n                    // eslint-disable-next-line react/no-array-index-key\n                    return <img key={index} src={thumbnail} alt={basemap.altText} className=\"basemapCardThumbnail\" />;\n                  })}\n                <div className=\"basemapCardThumbnailOverlay\" />\n              </>\n            }\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import {\n  Cast,\n  AbstractPlugin,\n  TypePluginOptions,\n  TypeIconButtonProps,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypePanelProps,\n  TypeJsonObject,\n  AnySchemaObject,\n} from 'geoview-core';\n\nimport { BasemapPanel } from './basemap-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-basemap-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass BasemapPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      basemapPanel: 'Basemaps',\n    },\n    fr: {\n      basemapPanel: 'Fond de carte',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api, ui } = cgpv;\n      const { MapIcon } = ui.elements;\n      const { displayLanguage } = api.map(mapId);\n      // button props\n      const button: TypeIconButtonProps = {\n        id: 'basemapPanelButton',\n        tooltip: this.translations[displayLanguage].basemapPanel as string,\n        tooltipPlacement: 'right',\n        children: <MapIcon />,\n        visible: true,\n      };\n\n      // panel props\n      const panel: TypePanelProps = {\n        title: this.translations[displayLanguage].basemapPanel,\n        icon: '<i class=\"material-icons\">map</i>',\n        width: 200,\n        status: configObj?.isOpen as boolean,\n      };\n\n      // create a new button panel on the app-bar\n      this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n      // set panel content\n      this.buttonPanel?.panel?.changeContent(<BasemapPanel mapId={mapId} config={configObj || {}} />);\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n\n      if (this.buttonPanel) {\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n\n        // reset basemaps array\n        api.map(mapId).basemap.basemaps = [];\n        // reload default basemap\n        api.map(mapId).basemap.loadDefaultBasemaps();\n      }\n    }\n  }\n}\n\nexport default BasemapPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['basemap-panel'] = Cast<AbstractPlugin>(BasemapPanelPlugin);\n"],"names":["w","window","BasemapPanel","props","mapId","config","cgpv","myMap","api","map","react","ui","elements","Select","Card","useState","useEffect","basemapList","setBasemapList","activeBasemapId","setActiveBasemapId","canSwichProjection","classes","makeStyles","theme","basemapCard","backgroundColor","palette","grey","A700","color","primary","light","display","flexDirection","backgroundClip","border","basemapPanel","borderDefault","borderRadius","boxShadow","marginBottom","transition","header","fontSize","fontWeight","margin","padding","height","width","order","position","objectFit","top","left","overlayDefault","cursor","borderColor","borderHover","overlayHover","borderActive","overlayActive","useStyles","projections","supportedProjections","obj","projectionCode","mapFeaturesConfig","viewSettings","projection","mapProjection","setMapProjection","setBasemap","basemapId","basemap","createBasemapArray","basemapsArray","toJsonObject","find","isInit","basemaps","customBasemap","customBasemaps","basemapIndex","createCustomBasemap","prevArray","length","basemapOptions","coreBasemaps","createCoreBasemap","id","shaded","labeled","fullWidth","labelId","value","onChange","event","target","currentView","getView","currentCenter","getCenter","currentProjection","getProjection","getCode","newCenter","transformPoints","newProjection","newView","zoom","getZoom","minZoom","getMinZoom","maxZoom","getMaxZoom","center","setView","emit","mapViewProjectionPayload","eventNames","MAP","EVENT_MAP_VIEW_PROJECTION_CHANGE","label","style","inputLabel","menuItems","key","item","children","tabIndex","root","className","onClick","onKeyPress","title","name","content","thumbnailUrl","src","alt","altText","Array","isArray","thumbnail","index","BasemapPanelPlugin","pluginId","schema","defaultConfig","en","fr","configObj","pluginProps","MapIcon","displayLanguage","button","tooltip","translations","tooltipPlacement","visible","panel","icon","status","isOpen","buttonPanel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","buttonPanelId","loadDefaultBasemaps","AbstractPlugin","plugins","Cast"],"sourceRoot":""}