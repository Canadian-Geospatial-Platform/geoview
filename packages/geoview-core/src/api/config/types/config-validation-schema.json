{
  "$id": "https://cgpv/schema",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GeoView Core Config Schema",
  "type": "object",
  "version": 1.0,
  "comments": "This schema is used to validate the JSON representation of the input configuration and the internal instance of map features and geoview layers.",
  "additionalProperties": false,
  "definitions": {
    "MapFeatureConfig": {
      "description": "The map feature configuration.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "map": {
          "$ref": "#/definitions/TypeMapConfig"
        },
        "theme": {
          "description": "Theme style the viewer uses.",
          "$ref": "#/definitions/TypeDisplayTheme"
        },
        "navBar": {
          "$ref": "#/definitions/TypeNavBarProps"
        },
        "footerBar": {
          "$ref": "#/definitions/TypeFooterBarProps"
        },
        "appBar": {
          "$ref": "#/definitions/TypeAppBarProps"
        },
        "overviewMap": {
          "$ref": "#/definitions/TypeOverviewMapProps"
        },
        "components": {
          "$ref": "#/definitions/TypeMapComponents"
        },
        "corePackages": {
          "$ref": "#/definitions/TypeMapCorePackages"
        },
        "externalPackages": {
          "$ref": "#/definitions/TypeExternalPackages"
        },
        "serviceUrls": {
          "$ref": "#/definitions/TypeServiceUrls"
        },
        "schemaVersionUsed": {
          "$ref": "#/definitions/TypeValidVersions"
        },
        "globalSettings": {
          "$ref": "#/definitions/TypeGlobalSettings"
        }
      },
      "required": ["map"]
    },
    "TypeMapConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "basemapOptions": {
          "$ref": "#/definitions/TypeBasemapOptions"
        },
        "interaction": {
          "$ref": "#/definitions/TypeInteraction"
        },
        "listOfGeoviewLayerConfig": {
          "description": "List of GeoView Layers in the order which they should be added to the map.",
          "additionalProperties": false,
          "$ref": "#/definitions/TypeListOfAbstractGeoviewLayerConfig"
        },
        "viewSettings": {
          "$ref": "#/definitions/TypeViewSettings"
        },
        "highlightColor": {
          "$ref": "#/definitions/TypeHighlightColors"
        },
        "overlayObjects": {
          "$ref": "#/definitions/TypeOverlayObjects"
        },
        "extraOptions": {
          "description": "Additional options used for OpenLayers map options",
          "type": "object"
        }
      },
      "required": ["basemapOptions", "interaction", "viewSettings"]
    },
    "TypeListOfAbstractGeoviewLayerConfig": {
      "description": "The list of geoview layer configurations. The map config validation ends here. The only thing we need to verify for the moment is it must be an array.",
      "type": "array"
    },
    "TypeDisplayTheme": {
      "description": "Valid values for the theme property.",
      "additionalProperties": false,
      "enum": ["dark", "light", "geo.ca"],
      "default": "geo.ca"
    },
    "TypeValidNavBarProps": {
      "description": "Valid values for the navBar array.",
      "additionalProperties": false,
      "enum": ["zoom", "fullscreen", "home", "location", "basemap-select"]
    },
    "TypeNavBarProps": {
      "description": "Controls available on the navigation bar.",
      "additionalProperties": false,
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/TypeValidNavBarProps"
      },
      "default": ["zoom", "fullscreen", "home", "basemap-select"],
      "minItems": 0
    },
    "TypeValidFooterBarTabsCoreProps": {
      "description": "Valid values for the footerBar tabs core array.",
      "additionalProperties": false,
      "enum": ["legend", "layers", "details", "data-table", "time-slider", "geochart"]
    },
    "TypeFooterBarTabsCustomProps": {
      "description": "Footer bar tabs custom definition.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "defaultTabs": {
          "type": "string"
        },
        "contentHTML": {
          "type": "string"
        }
      }
    },
    "TypeFooterBarProps": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "tabs": {
          "description": "Available tabs",
          "type": "object",
          "properties": {
            "core": {
              "description": "Default core tabs of footer bar to use. NOTE: config from packages for time-slider and geochart are in the same loaction as core config (<<core config name>>-<<package name>>.json).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TypeValidFooterBarTabsCoreProps"
              },
              "minItems": 1,
              "default": ["legend", "layers", "details", "data-table"],
              "uniqueItems": true
            },
            "custom": {
              "description": "Custom tabs of footer bar to use",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TypeFooterBarTabsCustomProps"
              },
              "minItems": 0,
              "default": [],
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        },
        "collapsed": {
          "description": "State of footer bar when map is loaded (expanded or collapsed)",
          "type": "boolean",
          "default": false
        },
        "selectedTab": {
          "type": "string",
          "enum": ["legend", "layers", "details", "data-table", "time-slider", "geochart"],
          "description": "Footer tab to be selected at map load"
        }
      },
      "required": ["tabs"]
    },
    "TypeValidAppBarCoreProps": {
      "description": "Valid values for the app bar tabs core array.",
      "additionalProperties": false,
      "enum": ["geolocator", "export", "basemap-panel", "geochart", "details", "legend", "guide", "data-table", "layers", "aoi-panel"]
    },
    "TypeAppBarProps": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "tabs": {
          "description": "Available tabs - controls",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "core": {
              "description": "Default core tabs of app-bar to use. NOTE: config from packages like geochart are in the same loaction as core config (<<core config name>>-<<package name>>.json).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TypeValidAppBarCoreProps"
              },
              "minItems": 0,
              "default": ["geolocator"],
              "uniqueItems": true
            }
          }
        },
        "collapsed": {
          "description": "State of app bar when map is loaded (expanded or collapsed)",
          "type": "boolean",
          "default": true
        },
        "selectedTab": {
          "type": "string",
          "enum": ["geolocator", "basemap-panel", "geochart", "details", "legend", "guide", "data-table", "layers", "aoi-panel"],
          "description": "App bar tab to be selected at map load"
        }
      },
      "required": ["tabs"]
    },
    "TypeOverviewMapProps": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "hideOnZoom": {
          "description": "Minimum zoom level to show overview map",
          "type": "number",
          "minimum": 0,
          "maximum": 10,
          "default": 0
        }
      }
    },
    "TypeValidMapComponentProps": {
      "description": "Valid values for the map component array.",
      "additionalProperties": false,
      "enum": ["overview-map", "north-arrow"]
    },
    "TypeMapComponents": {
      "description": "Core components to initialize on viewer load. The schema for those are inside this file.",
      "additionalProperties": false,
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/TypeValidMapComponentProps"
      },
      "default": ["overview-map", "north-arrow"],
      "minItems": 0
    },
    "TypeValidMapCorePackageProps": {
      "description": "Valid values for the map core package array.",
      "additionalProperties": false,
      "enum": ["swiper"]
    },
    "TypeMapCorePackages": {
      "description": "Core map packages to initialize on viewer load. The schema for those are on their own package. NOTE: config from packages are in the same loaction as core config (<<core config name>>-<<package name>>.json).",
      "additionalProperties": false,
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/TypeValidMapCorePackageProps"
      },
      "default": [],
      "minItems": 0
    },
    "TypeExternalPackagesProps": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "name": {
          "description": "External Package name. The name must be identical to the window external package object to load.",
          "type": "string"
        },
        "configUrl": {
          "description": "The url to the external package configuration setting. The core package will read the configuration and pass it inside the package.",
          "type": "string"
        }
      },
      "required": ["name"]
    },
    "TypeExternalPackages": {
      "description": "List of external packages to initialize on viewer load.",
      "additionalProperties": false,
      "type": "array",
      "items": {
        "$ref": "#/definitions/TypeExternalPackagesProps"
      },
      "default": [],
      "minItems": 0
    },
    "TypeServiceUrls": {
      "description": "Service endpoint urls",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "geocoreUrl": {
          "description": "Service end point to access API for layers specification (loading and plugins parameters). By default it is GeoCore but can be another endpoint with similar output.",
          "type": "string",
          "default": "https://geocore.api.geo.ca"
        },
        "proxyUrl": {
          "description": "An optional proxy to be used for dealing with same-origin issues.  URL must either be a relative path on the same server or an absolute path on a server which sets CORS headers.",
          "type": "string",
          "default": "https://maps.canada.ca/wmsproxy/ws/wmsproxy/executeFromProxy"
        },
        "geolocator": {
          "description": "Service end point to access geo location of searched value.",
          "type": "string",
          "default": "https://geolocator.api.geo.ca?keys=geonames,nominatim,locate"
        }
      }
    },
    "TypeValidVersions": {
      "description": "The schema version that can be used to validate the configuration file. The schema should enumerate the list of versions accepted by this version of the viewer.",
      "enum": ["1.0"]
    },
    "TypeGlobalSettings": {
      "additionalProperties": false,
      "type": "object",
      "description": "Universal map settings",
      "properties": {
        "canRemoveSublayers": {
          "description": "Whether or not sublayers can be removed from layer groups.",
          "type": "boolean",
          "default": true
        }
      }
    },
    "TypeBasemapOptions": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "basemapId": {
          "$ref": "#/definitions/TypeBasemapId"
        },
        "shaded": {
          "description": "Enable or disable shaded basemap (if basemap id is set to shaded then this should be false).",
          "type": "boolean",
          "default": true
        },
        "labeled": {
          "description": "Enable or disable basemap labels",
          "type": "boolean",
          "default": true
        }
      },
      "required": ["basemapId", "shaded", "labeled"]
    },
    "TypeBasemapId": {
      "description": "Id of the basemap to use.",
      "enum": ["transport", "osm", "simple", "nogeom", "shaded", "imagery"],
      "default": "transport"
    },
    "TypeInteraction": {
      "description": "If map is dynamic (pan/zoom) or static to act as a thumbnail (no nav bar).",
      "additionalProperties": false,
      "enum": ["static", "dynamic"],
      "default": "dynamic"
    },
    "AbstractGeoviewLayerConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "geoviewLayerId": {
          "description": "The id of the layer for referencing within the viewer (does not relate directly to any external service). The id will have the language extension (id-'lang').",
          "type": "string"
        },
        "useInternalSchema": {
          "description": "Flag used to select the type of schema validation to apply (input/internal).",
          "type": "boolean"
        },
        "geoviewLayerName": {
          "description": "The display name of the layer (English/French). If it is not present the viewer will make an attempt to scrape this information.",
          "oneOf": [
            {
              "description": "Used by the input schema.",
              "$ref": "#/definitions/TypeLocalizedString"
            },
            {
              "description": "Used by the internal schema.",
              "type": "string"
            }
          ]
        },
        "isGeocore": {
          "description": "A flag used to indicate that the layer is a GeoCore layer.",
          "type": "boolean"
        },
        "metadataAccessPath": {
          "description": "The GeoView layer service access path (English/French).",
          "oneOf": [
            {
              "description": "Used by the input schema.",
              "$ref": "#/definitions/TypeLocalizedString"
            },
            {
              "description": "Used by the internal schema.",
              "type": "string"
            }
          ]
        },
        "geoviewLayerType": {
          "description": "Type of GeoView layer.",
          "$ref": "#/definitions/TypeGeoviewLayerType"
        },
        "serviceDateFormat": {
          "description": "Date format used by the service endpoint.",
          "type": "string",
          "default": "DD/MM/YYYY HH:MM:SSZ"
        },
        "externalDateFormat": {
          "description": "Date format used by the getFeatureInfo to output date variable.",
          "type": "string",
          "default": "DD/MM/YYYY HH:MM:SSZ"
        },
        "isTimeAware": {
          "description": "Flag to mention if layer will use its time dimension if provided. Used to remove a layer from time enabled functions like time slider.",
          "type": "boolean",
          "default": true
        },
        "listOfLayerEntryConfig": {
          "description": "The layer entries to use from the GeoView layer.",
          "$ref": "#/definitions/TypeListOfLayerEntryConfig"
        }
      },
      "if": {
        "properties": {
          "useInternalSchema": {
            "description": "The useInternalSchema property is not defined by the user but by the viewer when we want to use the internal schema.",
            "const": true
          }
        },
        "required": ["useInternalSchema"]
      },
      "then": {
        "description": "Use Internal Schema",
        "properties": {
          "geoviewLayerName": {
            "description": "The display name of the layer.",
            "type": "string"
          },
          "metadataAccessPath": {
            "description": "The GeoView layer service access path (English/French).",
            "type": "string"
          }
        }
      },
      "else": {
        "description": "Use Input Schema",
        "properties": {
          "geoviewLayerName": {
            "description": "The display name of the layer (English/French). If it is not present the viewer will make an attempt to scrape this information.",
            "$ref": "#/definitions/TypeLocalizedString"
          },
          "metadataAccessPath": {
            "description": "The GeoView layer service access path (English/French).",
            "$ref": "#/definitions/TypeLocalizedString"
          }
        }
      },
      "required": ["geoviewLayerType", "metadataAccessPath", "listOfLayerEntryConfig"]
    },
    "TypeListOfLayerEntryConfig": {
      "description": "The list of layer configurations. The AbstractGeoviewLayerConfig validation ends here. The only thing we need to verify for the moment is it must be an array of at least one element.",
      "type": "array"
    },
    "TypeViewSettings": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "initialView": {
          "description": "Settings for the initial viewing area of the map.",
          "$ref": "#/definitions/TypeMapViewSettings"
        },
        "enableRotation": {
          "description": "Enable rotation. If false, a rotation constraint that always sets the rotation to zero is used.",
          "type": "boolean",
          "default": true
        },
        "rotation": {
          "description": "The initial rotation for the view in degree (positive rotation clockwise, 0 means North). Will be converted to radiant by the viewer.",
          "type": "integer",
          "minimum": -360,
          "maximum": 360,
          "default": 0
        },
        "maxExtent": {
          "description": "The extent that constrains the view. Called with [minX, minY, maxX, maxY] extent coordinates.",
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number"
          },
          "default": [-125, 30, -60, 89]
        },
        "minZoom": {
          "description": "The minimum zoom level used to determine the resolution constraint. If not set, will use default from basemap.",
          "type": "integer",
          "minimum": 0,
          "maximum": 50
        },
        "maxZoom": {
          "description": "The maximum zoom level used to determine the resolution constraint. If not set, will use default from basemap.",
          "type": "integer",
          "minimum": 0,
          "maximum": 50
        },
        "projection": {
          "$ref": "#/definitions/TypeValidMapProjectionCodes",
          "default": 3978
        }
      }
    },
    "TypeHighlightColors": {
      "description": "Color to use for feature highlights.",
      "additionalProperties": false,
      "enum": ["black", "white", "red", "green"],
      "default": "black"
    },
    "TypeOverlayObjects": {
      "type": "object",
      "properties": {
        "pointMarkers": {
          "$ref": "#/definitions/TypePointMarkers"
        }
      }
    },
    "TypePointMarkers": {
      "type": "object",
      "patternProperties": {
        "[^]*": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypePointMarker"
          }
        }
      }
    },
    "TypePointMarker": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID for point marker. Must be unique in group."
        },
        "coordinate": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": {
            "type": "number"
          },
          "description": "The coordinates of the marker."
        },
        "color": {
          "type": "string",
          "default": "green",
          "description": "Marker color."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1
        },
        "projection": {
          "description": "The projection code of the coordinates.",
          "type": "number",
          "default": 4326
        }
      },
      "required": ["id", "coordinate"]
    },
    "TypeDisplayLanguage": {
      "description": "Display languages supported.",
      "enum": ["en", "fr"]
    },
    "TypeLocalizedString": {
      "additionalProperties": false,
      "minProperties": 1,
      "type": "object",
      "properties": {
        "en": {
          "description": "The English version of the string.",
          "type": "string"
        },
        "fr": {
          "description": "The French version of the string.",
          "type": "string"
        }
      }
    },
    "TypeGeoviewLayerType": {
      "description": "Type of GeoView layer.",
      "type": "string",
      "enum": [
        "CSV",
        "esriDynamic",
        "esriFeature",
        "esriImage",
        "GeoJSON",
        "GeoPackage",
        "imageStatic",
        "ogcFeature",
        "ogcWfs",
        "ogcWms",
        "vectorTiles",
        "xyzTiles"
      ]
    },
    "TypeLayerInitialSettings": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "controls": {
          "description": "The status of various controls for the layer (available/unavailable).",
          "$ref": "#/definitions/TypeLayerControls"
        },
        "bounds": {
          "description": "The geographic bounding box that contains all the layer's features.",
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number"
          }
        },
        "extent": {
          "description": "The extent that constrains the view. Called with [minX, minY, maxX, maxY] extent coordinates.",
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number"
          }
        },
        "minZoom": {
          "description": "The minimum view zoom level (exclusive) above which this layer will be visible.",
          "type": "integer",
          "minimum": 0,
          "maximum": 50
        },
        "maxZoom": {
          "description": "The maximum view zoom level (inclusive) above which this layer will be visible.",
          "type": "integer",
          "minimum": 0,
          "maximum": 50
        },
        "className": {
          "description": "A CSS class name to set to the layer element.",
          "type": "string"
        },
        "states": {
          "description": "The status of initial states for the layer.",
          "$ref": "#/definitions/TypeLayerStates"
        }
      }
    },
    "TypeLayerControls": {
      "description": "Which UI controls are available.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "highlight": {
          "type": "boolean",
          "default": true
        },
        "hover": {
          "type": "boolean",
          "default": true
        },
        "opacity": {
          "type": "boolean",
          "default": true
        },
        "query": {
          "type": "boolean",
          "default": false
        },
        "remove": {
          "type": "boolean",
          "default": true
        },
        "table": {
          "type": "boolean",
          "default": true
        },
        "visibility": {
          "type": "boolean",
          "default": true
        },
        "zoom": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "TypeLayerStates": {
      "description": "Initial layer states.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "visible": {
          "description": "Initial visibility setting.",
          "type": "boolean",
          "default": true
        },
        "legendCollapsed": {
          "description": "Is the layer's legend collapsed",
          "type": "boolean",
          "default": false
        },
        "opacity": {
          "description": "Initial opacity setting.",
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1
        },
        "hoverable": {
          "description": "Is the layer hoverable.",
          "type": "boolean"
        },
        "queryable": {
          "description": "Is the layer queryable.",
          "type": "boolean"
        }
      }
    },
    "TypeMapViewSettings": {
      "type": "object",
      "maxItems": 1,
      "properties": {
        "zoomAndCenter": {
          "$ref": "#/definitions/TypeZoomAndCenter"
        },
        "extent": {
          "description": "The extent for the initial view. Called with [minX, minY, maxX, maxY] extent coordinates.",
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number"
          }
        },
        "layerIds": {
          "description": "Geoview layer ID(s) or layer path(s) of layer(s) to use as initial map focus. If empty, will use all layers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TypeZoomAndCenter": {
      "description": "Initial zoom and center coordinates to set map view.",
      "type": "array",
      "prefixItems": [
        {
          "type": "number",
          "description": "Initial map zoom level. Zoom level are define by the basemap zoom levels. Levels between whole numbers are supported to fine tune initial view.",
          "minimum": 0,
          "maximum": 28,
          "default": 3.5
        },
        [
          {
            "type": "number",
            "description": "Initial longitude value for map center.",
            "minimum": -160,
            "maximum": 160,
            "default": -90
          },
          {
            "type": "number",
            "description": "Initial latitude value for map center.",
            "minimum": -80,
            "maximum": 80,
            "default": 60
          }
        ]
      ],
      "default": [4.5, [-90, 67]]
    },
    "TypeValidMapProjectionCodes": {
      "description": "Spatial Reference EPSG code supported (https://epsg.io/). We support Web Mercator and Lambert Conical Conform Canada.",
      "enum": [3978, 3857],
      "default": 3978
    },
    "TypeValidSourceProjectionCodes": {
      "description": "Spatial Reference EPSG code supported (https://epsg.io/). We support Web Mercator and Lambert Conical Conform Canada.",
      "enum": [3978, 3857, 4326],
      "default": 3978
    },
    "EsriDynamicLayerConfig": {
      "description": "Structure used by the viewer to describe the configuration of an ESRI dynamic layer.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/AbstractGeoviewLayerConfig"
        },
        {
          "type": "object",
          "properties": {
            "geoviewLayerType": {
              "enum": ["esriDynamic"]
            }
          }
        }
      ]
    },
    "EsriImageLayerConfig": {
      "description": "Structure used by the viewer to describe the configuration of an ESRI Image layer.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/AbstractGeoviewLayerConfig"
        },
        {
          "type": "object",
          "properties": {
            "geoviewLayerType": {
              "enum": ["esriImage"]
            }
          }
        }
      ]
    },
    "EsriFeatureLayerConfig": {
      "description": "Structure used by the viewer to describe the configuration of an ESRI feature layer.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/AbstractGeoviewLayerConfig"
        },
        {
          "type": "object",
          "properties": {
            "geoviewLayerType": {
              "enum": ["esriFeature"]
            }
          }
        }
      ]
    },
    "WmsLayerConfig": {
      "description": "Structure used by the viewer to describe the configuration of a WMS layer.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/AbstractGeoviewLayerConfig"
        },
        {
          "type": "object",
          "properties": {
            "geoviewLayerType": {
              "enum": ["ogcWms"]
            }
          }
        }
      ]
    },
    "WfsLayerConfig": {
      "description": "Structure used by the viewer to describe the configuration of a WFS layer.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/AbstractGeoviewLayerConfig"
        },
        {
          "type": "object",
          "properties": {
            "geoviewLayerType": {
              "enum": ["ogcWfs"]
            }
          }
        }
      ]
    },
    "GeoJsonLayerConfig": {
      "description": "Structure used by the viewer to describe the configuration of a GeoJSON layer.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/AbstractGeoviewLayerConfig"
        },
        {
          "type": "object",
          "properties": {
            "geoviewLayerType": {
              "enum": ["GeoJSON"]
            }
          }
        }
      ]
    },
    "EntryConfigBaseClass": {
      "description": "Base class from which we derive all the nodes (group and leaves) in the layer tree.",
      "type": "object",
      "properties": {
        "isLayerGroup": {
          "description": "Flag used to distinguish layer group nodes.",
          "type": "boolean"
        },
        "layerId": {
          "description": "The id of the layer to display on the map.",
          "type": "string"
        },
        "useInternalSchema": {
          "description": "Flag used to select the type of schema validation to apply (input/internal).",
          "type": "boolean"
        },
        "layerName": {
          "description": "The display name of the layer (English/French). If it is not present the viewer will make an attempt to scrape this information.",
          "oneOf": [
            {
              "description": "Used by the input schema.",
              "$ref": "#/definitions/TypeLocalizedString"
            },
            {
              "description": "Used by the internal schema.",
              "type": "string"
            }
          ]
        },
        "attributions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bounds": {
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number"
          }
        },
        "minScale": {
          "description": "Minimum scale the layer can display.",
          "type": "number",
          "default": 0
        },
        "maxScale": {
          "description": "Maximum scale the layer can display.",
          "type": "number",
          "default": 0
        },
        "initialSettings": {
          "description": "Initial settings to apply to the layer entry at creation time. Initial settings are inherited from the parent in the configuration tree.",
          "$ref": "#/definitions/TypeLayerInitialSettings"
        },
        "entryType": {
          "description": "The node data type.",
          "$ref": "#/definitions/TypeLayerEntryType"
        }
      },
      "if": {
        "properties": {
          "useInternalSchema": {
            "description": "The useInternalSchema property is not defined by the user but programmatically by the viewer when we want to use the internal schema.",
            "const": true
          }
        },
        "required": ["useInternalSchema"]
      },
      "then": {
        "description": "Use Internal Schema",
        "properties": {
          "layerName": {
            "description": "The display name of the layer.",
            "type": "string"
          },
          "entryType": {
            "description": "The node data type.",
            "$ref": "#/definitions/TypeLayerEntryType"
          }
        },
        "required": ["entryType", "layerId", "layerName"]
      },
      "else": {
        "description": "Use Input Schema",
        "properties": {
          "layerName": {
            "description": "Used by the input schema. The display name of the layer (English/French). If it is not present the viewer will make an attempt to scrape this information.",
            "$ref": "#/definitions/TypeLocalizedString"
          },
          "entryType": {
            "description": "Input schema does not allow the user to specify the entryType property.",
            "not": {},
            "errorMessage": {
              "not": "Property entryType is not allowed in user data."
            }
          }
        },
        "required": ["layerId"]
      },
      "errorMessage": {
        "if": "The data does not respect the EntryConfigBaseClass schema definition."
      }
    },
    "AbstractBaseLayerEntryConfig": {
      "description": "Base class from which we derive all the leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/EntryConfigBaseClass"
        },
        {
          "type": "object",
          "properties": {
            "geometryType": {
              "description": "The geometry type of the leaf node.",
              "$ref": "#/definitions/TypeStyleGeometry"
            },
            "source": {
              "$ref": "#/definitions/TypeBaseSourceInitialConfig"
            },
            "temporalDimension": {
              "$ref": "#/definitions/TypeTemporalDimension"
            }
          }
        }
      ]
    },
    "GroupLayerEntryConfig": {
      "description": "Class from which we derive all the layer group nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/EntryConfigBaseClass"
        },
        {
          "type": "object",
          "properties": {
            "entryType": {
              "enum": ["group"]
            },
            "listOfLayerEntryConfig": {
              "description": "The list of layer entry configurations to use from the GeoView layer group.",
              "$ref": "#/definitions/TypeListOfLayerEntryConfig"
            }
          }
        }
      ]
    },
    "EsriDynamicLayerEntryConfig": {
      "description": "Class from which we derive all the ESRI Dynamic leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "description": "The actual parent class is AbstractBaseEsriLayerEntryConfig, whose parent class is AbstractBaseLayerEntryConfig. Both classes have the same properties.",
          "$ref": "#/definitions/AbstractBaseLayerEntryConfig"
        },
        {
          "type": "object",
          "properties": {
            "layerId": {
              "type": "string",
              "pattern": "^[0-9]+$",
              "errorMessage": {
                "pattern": "The layer identifier (layerId) must be a numeric string."
              }
            },
            "entryType": {
              "enum": ["raster-image"]
            },
            "source": {
              "$ref": "#/definitions/TypeSourceEsriDynamicInitialConfig"
            },
            "style": {
              "$ref": "#/definitions/TypeStyleConfig"
            }
          }
        }
      ]
    },
    "EsriImageLayerEntryConfig": {
      "description": "Class from which we derive all the ESRI Dynamic leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "description": "The actual parent class is AbstractBaseEsriLayerEntryConfig, whose parent class is AbstractBaseLayerEntryConfig. Both classes have the same properties.",
          "$ref": "#/definitions/AbstractBaseLayerEntryConfig"
        },
        {
          "type": "object",
          "properties": {
            "entryType": {
              "enum": ["raster-image"]
            },
            "source": {
              "$ref": "#/definitions/TypeSourceEsriImageInitialConfig"
            },
            "style": {
              "$ref": "#/definitions/TypeStyleConfig"
            }
          }
        }
      ]
    },
    "EsriFeatureLayerEntryConfig": {
      "description": "Class from which we derive all the ESRI Feature leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "description": "The actual parent class is AbstractBaseEsriLayerEntryConfig, whose parent class is AbstractBaseLayerEntryConfig. Both classes have the same properties.",
          "$ref": "#/definitions/AbstractBaseLayerEntryConfig"
        },
        {
          "type": "object",
          "properties": {
            "layerId": {
              "type": "string",
              "pattern": "^[0-9]+$",
              "errorMessage": {
                "pattern": "The layer identifier (layerId) must be a numeric string."
              }
            },
            "source": {
              "$ref": "#/definitions/TypeSourceEsriFeatureInitialConfig"
            },
            "style": {
              "$ref": "#/definitions/TypeStyleConfig"
            }
          }
        }
      ]
    },
    "WmsLayerEntryConfig": {
      "description": "Class from which we derive all the WMS leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/AbstractBaseLayerEntryConfig"
        },
        {
          "type": "object",
          "properties": {
            "source": {
              "$ref": "#/definitions/TypeSourceWmsInitialConfig"
            },
            "style": {
              "$ref": "#/definitions/TypeStyleConfig"
            }
          }
        }
      ]
    },
    "WfsLayerEntryConfig": {
      "description": "Class from which we derive all the WFS leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "description": "The parent class.",
          "$ref": "#/definitions/AbstractBaseLayerEntryConfig"
        },
        {
          "type": "object",
          "properties": {
            "source": {
              "$ref": "#/definitions/TypeSourceWfsInitialConfig"
            },
            "style": {
              "$ref": "#/definitions/TypeStyleConfig"
            }
          }
        }
      ]
    },
    "TypeStyleGeometry": {
      "description": "Valid keys for the geometryType property.",
      "enum": ["point", "linestring", "polygon"]
    },
    "TypeBaseSourceInitialConfig": {
      "description": "Base type from which we derive the source properties for all the leaf nodes in the layer tree.",
      "type": "object",
      "properties": {
        "projection": {
          "$ref": "#/definitions/TypeValidSourceProjectionCodes"
        },
        "crossOrigin": {
          "description": "The crossOrigin attribute if needed to load the data.",
          "type": "string",
          "default": "Anonymous"
        }
      }
    },
    "TypeSourceTileInitialConfig": {
      "description": "Initial settings for tile image sources.",
      "additionalProperties": false,
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseSourceInitialConfig"
        },
        {
          "additionalProperties": false,
          "type": "object",
          "properties": {
            "tileGrid": {
              "description": "Tile grid parameters to use.",
              "$ref": "#/definitions/TypeTileGrid"
            }
          }
        }
      ]
    },
    "TypeSourceWmsInitialConfig": {
      "description": "Initial settings for tile image sources.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseSourceInitialConfig"
        },
        {
          "type": "object",
          "properties": {
            "featureInfo": {
              "$ref": "#/definitions/TypeFeatureInfoLayerConfig"
            },
            "serverType": {
              "description": "The type of the remote WMS server.",
              "$ref": "#/definitions/TypeOfServer"
            },
            "wmsStyle": {
              "description": "Array of style to choose from.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "TypeOfServer": {
      "description": "The type of the remote WMS server.",
      "enum": ["mapserver", "geoserver", "qgis"],
      "default": "mapserver"
    },
    "TypeSourceImageStaticInitialConfig": {
      "description": "Initial settings for static image sources.",
      "additionalProperties": false,
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseSourceInitialConfig"
        },
        {
          "additionalProperties": false,
          "type": "object",
          "properties": {
            "extent": {
              "description": "The extent of the static image. Called with [minX, minY, maxX, maxY] extent coordinates.",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": {
                "type": "number"
              }
            }
          }
        }
      ]
    },
    "TypeBaseVectorSourceInitialConfig": {
      "description": "Base type from which we derive the source properties for all the vector leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseSourceInitialConfig"
        },
        {
          "type": "object",
          "properties": {
            "maxRecordCount": {
              "description": "Maximum number of records to fetch.",
              "type": "number",
              "default": 0
            },
            "layerFilter": {
              "description": "Filter to apply on features of this layer.",
              "type": "string"
            },
            "featureInfo": {
              "$ref": "#/definitions/TypeFeatureInfoLayerConfig"
            },
            "format": {
              "$ref": "#/definitions/TypeVectorSourceFormats"
            },
            "strategy": {
              "description": "The loading strategy to use. By default an all strategy is used, a one-off strategy which loads all features at once.",
              "enum": ["all", "bbox"],
              "default": "all"
            }
          }
        }
      ]
    },
    "TypeVectorSourceInitialConfig": {
      "description": "Initial settings to apply to the GeoView vector layer source at creation time.",
      "additionalProperties": false,
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseVectorSourceInitialConfig"
        },
        {
          "type": "object",
          "properties": {
            "separator": {
              "description": "The character used to separate columns of csv file.",
              "type": "string"
            }
          }
        }
      ]
    },
    "TypeVectorTileSourceInitialConfig": {
      "description": "Initial settings to apply to layer sources providing vector data divided into a tile grid.",
      "additionalProperties": false,
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseVectorSourceInitialConfig"
        },
        {
          "type": "object",
          "properties": {
            "tileGrid": {
              "$ref": "#/definitions/TypeTileGrid"
            }
          }
        }
      ]
    },
    "TypeTileGrid": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "extent": {
          "description": "The extent that constrains the view. Called with [minX, minY, maxX, maxY] extent coordinates.",
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number"
          }
        },
        "origin": {
          "description": "The tile grid origin, i.e. where the x and y axes meet ([z, 0, 0]). Tile coordinates increase left to right and downwards. If not specified, extent must be provided.",
          "type": "array",
          "prefixItems": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ]
        },
        "resolutions": {
          "description": "Resolutions. The array index of each resolution needs to match the zoom level. This means that even if a minZoom is configured, the resolutions array will have a length of maxZoom + 1.",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "tileSize": {
          "description": "The tile grid origin, i.e. where the x and y axes meet ([z, 0, 0]). Tile coordinates increase left to right and downwards. If not specified, extent must be provided.",
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": {
            "type": "number"
          },
          "default": [256, 256]
        }
      },
      "required": ["origin", "resolutions"]
    },
    "TypeVectorSourceFormats": {
      "description": "The feature format used by the XHR feature loader when access path is set.",
      "enum": ["GeoJSON", "EsriJSON", "KML", "WFS", "featureAPI", "GeoPackage", "CSV"]
    },
    "TypeSourceEsriDynamicInitialConfig": {
      "description": "Type from which we derive the source properties for all the ESRI dynamic leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseSourceInitialConfig"
        },
        {
          "type": "object",
          "properties": {
            "maxRecordCount": {
              "description": "Maximum number of records to fetch.",
              "type": "number",
              "default": 0
            },
            "layerFilter": {
              "description": "Filter to apply on features of this layer.",
              "type": "string"
            },
            "featureInfo": {
              "$ref": "#/definitions/TypeFeatureInfoLayerConfig"
            },
            "format": {
              "$ref": "#/definitions/TypeEsriFormatParameter"
            },
            "transparent": {
              "description": "If true, the image will be exported with the background color of the map set as its transparent color. Only the .png and .gif formats support transparency.",
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "TypeSourceEsriImageInitialConfig": {
      "description": "Type from which we derive the source properties for all the ESRI dynamic leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseSourceInitialConfig"
        },
        {
          "type": "object",
          "properties": {
            "format": {
              "$ref": "#/definitions/TypeEsriFormatParameter"
            },
            "transparent": {
              "description": "If true, the image will be exported with the background color of the map set as its transparent color. Only the .png and .gif formats support transparency.",
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "TypeEsriFormatParameter": {
      "description": "The format of the exported image.",
      "enum": ["png", "jpg", "gif", "svg"],
      "default": "png"
    },
    "TypeSourceEsriFeatureInitialConfig": {
      "description": "Type from which we derive the source properties for all the ESRI feature leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseVectorSourceInitialConfig"
        }
      ]
    },
    "TypeSourceWfsInitialConfig": {
      "description": "Type from which we derive the source properties for all the WFS feature leaf nodes in the layer tree.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseVectorSourceInitialConfig"
        }
      ]
    },
    "TypeFeatureInfoLayerConfig": {
      "type": "object",
      "properties": {
        "queryable": {
          "description": "Allow querying.",
          "type": "boolean",
          "default": false
        },
        "nameField": {
          "description": "The display field of the layer. If it is not present the viewer will make an attempt to find the first valid field.",
          "type": "string"
        },
        "outfields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeOutfields"
          }
        }
      },
      "required": ["queryable"]
    },
    "TypeOutfields": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The field name.",
          "type": "string"
        },
        "alias": {
          "description": "The field alias that replaces the name when comes time to display it.",
          "type": "string"
        },
        "type": {
          "description": "The field type.",
          "$ref": "#/definitions/TypeOutfieldsType"
        },
        "domain": {
          "description": "The domain of values.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/codedValueType"
            },
            {
              "$ref": "#/definitions/rangeDomainType"
            }
          ]
        }
      },
      "required": ["name", "alias", "type", "domain"]
    },
    "TypeOutfieldsType": {
      "description": "The types supported by the outfields object.",
      "additionalProperties": false,
      "enum": ["string", "number", "date", "url"]
    },
    "codedValueType": {
      "description": "Coded value definition.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "type": {
          "enum": ["codedValue"]
        },
        "name": {
          "description": "The domain name.",
          "type": "string"
        },
        "description": {
          "description": "A description of the domain.",
          "type": "string"
        },
        "codedValues": {
          "description": "The list of coded values.",
          "$ref": "#/definitions/codeValueEntryType"
        }
      }
    },
    "codeValueEntryType": {
      "description": "The structure of a code value.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "description": "The code property has an unknown type."
        }
      }
    },
    "rangeDomainType": {
      "description": "The structure of a range domain.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "type": {
          "enum": ["range"]
        },
        "name": {
          "description": "The domain name.",
          "type": "string"
        },
        "range": {
          "type":"array",
          "minItems": 2,
          "maxItems": 2,
          "items": {
            "description": "The code property has an unknown type."
          }
        }
      },
      "required": ["type", "name", "range"]
    },
    "TypeLayerEntryType": {
      "description": "Layer entry data type.",
      "enum": ["vector", "vector-tile", "raster-tile", "raster-image", "group"]
    },
    "TypeTemporalDimension": {
      "additionalProperties": false,
      "type": "object",
      "description": "OGC time dimension definition.",
      "properties": {
        "field": {
          "type": "string"
        },
        "default": {
          "type": "string"
        },
        "unitSymbol": {
          "type": "string"
        },
        "range": {
          "$ref": "#/definitions/TypeRangeItems"
        },
        "nearestValues": {
          "enum": ["discrete", "absolute"]
        },
        "singleHandle": {
          "type": "boolean"
        }
      }
    },
    "TypeRangeItems": {
      "description": "Definition of the range object in the OGC time dimension.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "range": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TypeStyleConfig": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of style used by the layer.",
          "$ref": "#/definitions/TypeStyleConfigType"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasDefault": {
          "description": "Flag used to indicate that the symbology has a default value.",
          "type": "boolean"
        },
        "info": {
          "description": "Array of style information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeStyleConfigInfo"
          }
        }
      }
    },
    "TypeStyleConfigType": {
      "description": "Valid keys for the type property of style configurations.",
      "enum": ["simple", "uniqueValue", "classBreaks"]
    },
    "TypeStyleConfigInfo": {
      "type": "object",
      "properties": {
        "visible": {
          "description": "Flag used to show/hide features associated to the label.",
          "type": "boolean",
          "default": true
        },
        "label": {
          "type": "string"
        },
        "values": {
          "description": "Simple type has an empty array; uniqueValue type has many entries (up to 3 for ESRI) and classBreaks type has two entries (index 0 for min and index 1 for max).",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        },
        "settings": {
          "$ref": "#/definitions/TypeKindOfVectorSettings"
        }
      }
    },
    "TypeKindOfVectorSettings": {
      "description": "The type of geometry settings. It must respect the base type and one of the children types.",
      "allOf": [
        {
          "description": "Base type for the vector geometry.",
          "$ref": "#/definitions/TypeBaseVectorGeometryConfig"
        },
        {
          "description": "One of the chid type.",
          "anyOf": [
            {
              "$ref": "#/definitions/TypeLineStringVectorConfig"
            },
            {
              "$ref": "#/definitions/TypePolygonVectorConfig"
            },
            {
              "$ref": "#/definitions/TypeSimpleSymbolVectorConfig"
            },
            {
              "$ref": "#/definitions/TypeIconSymbolVectorConfig"
            }
          ]
        }
      ]
    },
    "TypeBaseVectorGeometryConfig": {
      "description": "Base type for the vector geometry types.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of vector config.",
          "$ref": "#/definitions/TypeBaseVectorType"
        }
      }
    },
    "TypeBaseVectorType": {
      "description": "Valid values for the type property of the base vector settings.",
      "enum": ["lineString", "filledPolygon", "simpleSymbol", "iconSymbol"]
    },
    "TypeLineStringVectorConfig": {
      "description": "Definition of the line symbol vector settings type.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseVectorGeometryConfig"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "enum": ["lineString"]
            },
            "stroke": {
              "$ref": "#/definitions/TypeStrokeSymbolConfig"
            }
          }
        }
      ]
    },
    "TypeStrokeSymbolConfig": {
      "description": "Stroke style for vector features.",
      "minProperties": 1,
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "lineStyle": {
          "$ref": "#/definitions/TypeLineStyle"
        },
        "width": {
          "type": "number"
        }
      }
    },
    "TypeLineStyle": {
      "description": "Line style to use for the feature.",
      "enum": [
        "dash",
        "dash-dot",
        "dash-dot-dot",
        "dot",
        "longDash",
        "longDash-dot",
        "null",
        "shortDash",
        "shortDash-dot",
        "shortDash-dot-dot",
        "solid"
      ]
    },
    "TypePolygonVectorConfig": {
      "description": "Definition of the polygon symbol vector settings type.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseVectorGeometryConfig"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "enum": ["filledPolygon"]
            },
            "color": {
              "type": "string"
            },
            "stroke": {
              "$ref": "#/definitions/TypeStrokeSymbolConfig"
            },
            "paternSize": {
              "description": "Distance between patern lines.",
              "type": "number",
              "default": 8
            },
            "paternWidth": {
              "description": "Patern line width.",
              "type": "number",
              "default": 1
            },
            "fillStyle": {
              "description": "Kind of filling  for vector features.",
              "$ref": "#/definitions/TypeFillStyle",
              "default": "solid"
            }
          }
        }
      ]
    },
    "TypeFillStyle": {
      "description": "Valid values to specify fill styles.",
      "enum": ["null", "solid", "backwardDiagonal", "cross", "diagonalCross", "forwardDiagonal", "horizontal", "vertical"]
    },
    "TypeSimpleSymbolVectorConfig": {
      "description": " Definition of the simple symbol vector settings type.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseVectorGeometryConfig"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "enum": ["simpleSymbol"]
            },
            "rotation": {
              "description": "Symbol rotation in radians.",
              "type": "number"
            },
            "color": {
              "type": "string"
            },
            "stroke": {
              "$ref": "#/definitions/TypeStrokeSymbolConfig"
            },
            "size": {
              "type": "number"
            },
            "offset": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "maxItems": 2
            },
            "symbol": {
              "$ref": "#/definitions/TypeSymbol"
            }
          }
        }
      ]
    },
    "TypeSymbol": {
      "description": "Valid values to specify symbol shapes.",
      "enum": ["circle", "+", "diamond", "square", "triangle", "X", "star"]
    },
    "TypeIconSymbolVectorConfig": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypeBaseVectorGeometryConfig"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "enum": ["iconSymbol"]
            },
            "mimeType": {
              "type": "string"
            },
            "src": {
              "type": "string"
            },
            "width": {
              "description": "Icon width in pixel.",
              "type": "integer"
            },
            "height": {
              "description": "Icon height in pixel.",
              "type": "integer"
            },
            "rotation": {
              "description": "Icon rotation in radians.",
              "type": "number"
            },
            "opacity": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            "offset": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "maxItems": 2
            },
            "crossOrigin": {
              "description": "The crossOrigin attribute for loaded images. Note that you must provide a crossOrigin value if you want to access pixel data with the Canvas renderer.",
              "type": "string",
              "default": "Anonymous"
            }
          }
        }
      ]
    },
    "TypePostSettings": {
      "description": "Definition of the post settings type needed when the GeoView GeoJSON layers need to use a POST instead of a GET.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "header": {
          "description": "An optional header object with string keys and string values.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data": {
          "description": "A required property that can be any type.",
          "type": ["object", "array", "string", "number", "boolean", "null"]
        }
      },
      "required": ["data"]
    }
  }
}
