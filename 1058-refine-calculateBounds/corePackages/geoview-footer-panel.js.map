{"version":3,"file":"corePackages/geoview-footer-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-footer-panel/src/details-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/legend-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/data-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport { ReactElement } from 'react';\n\nimport {\n  TypeWindow,\n  payloadIsAMapSingleClick,\n  markerDefinitionPayload,\n  payloadIsAllQueriesDone,\n  TypeArrayOfLayerData,\n  getLocalizedValue,\n  Coordinate,\n} from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\n\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the details component\n *\n * @returns {JSX.Element} created details component\n */\nexport function DetailsItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [list, setList] = useState<ReactElement>();\n  const [lngLat, setLngLat] = useState<Coordinate>([]);\n  const [handlerName, setHandlerName] = useState<string | null>(null);\n\n  useEffect(() => {\n    // create the listener to return the details\n    api.event.on(\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\n      (payload) => {\n        if (payloadIsAllQueriesDone(payload)) {\n          const { resultSets } = payload;\n          const newDetails: TypeArrayOfLayerData = [];\n          Object.keys(resultSets).forEach((layerPath) => {\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\n            const features = resultSets[layerPath]!;\n            if (features.length > 0) {\n              newDetails.push({ layerPath, layerName, features });\n            }\n          });\n          if (newDetails.length > 0) {\n            setDetails(newDetails);\n          } else {\n            setDetails([]);\n          }\n        } else {\n          setDetails([]);\n        }\n      },\n      `${mapId}/${mapId}-DetailsAPI`\n    );\n    api.event.on(\n      api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK,\n      (payload) => {\n        if (payloadIsAMapSingleClick(payload)) {\n          const { coordinates } = payload;\n          setHandlerName(payload.handlerName);\n          setLngLat(coordinates.lnglat);\n          api.event.emit(\n            markerDefinitionPayload(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_SHOW, payload.handlerName, coordinates.lnglat)\n          );\n        } else {\n          setLngLat([]);\n        }\n      },\n      mapId\n    );\n    return () => {\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\n      api.event.off(api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setList(api.map(mapId).details.createDetails(mapId, details, { mapId, location: lngLat, handlerName }));\n    setTimeout(() => {\n      api.event.emit(markerDefinitionPayload(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_SHOW, handlerName, lngLat));\n    }, 1800);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [details, lngLat]);\n\n  return <div>{list}</div>;\n}\n","/* eslint-disable react/require-default-props */\nimport { DetailedReactHTMLElement } from 'react';\nimport { TypeWindow, payloadIsALayerConfig, payloadIsRemoveGeoViewLayer } from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the legend component\n *\n * @returns {JSX.Element} created legend component\n */\nexport function LegendItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [legend, setLegend] = useState<DetailedReactHTMLElement<{}, HTMLElement>>();\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\n\n  const updateLayers = () => {\n    if (api.map(mapId).layer?.layerOrder !== undefined) setMapLayers([...api.map(mapId).layer.layerOrder].reverse());\n  };\n\n  useEffect(() => {\n    api.event.on(\n      api.eventNames.MAP.EVENT_MAP_LOADED,\n      () => {\n        updateLayers();\n      },\n      mapId\n    );\n    api.event.on(\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\n      (payload) => {\n        if (payloadIsRemoveGeoViewLayer(payload)) {\n          setMapLayers((orderedLayers) => orderedLayers.filter((layerId) => layerId !== payload.geoviewLayer.geoviewLayerId));\n        }\n      },\n      mapId\n    );\n    api.event.on(\n      api.eventNames.LAYER.EVENT_ADD_LAYER,\n      (payload) => {\n        if (payloadIsALayerConfig(payload)) {\n          api.event.on(\n            api.eventNames.LAYER.EVENT_LAYER_ADDED,\n            () => {\n              updateLayers();\n              api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, `${mapId}/${payload.layerConfig.geoviewLayerId}`);\n            },\n            `${mapId}/${payload.layerConfig.geoviewLayerId}`\n          );\n        }\n      },\n      mapId\n    );\n    return () => {\n      api.event.off(api.eventNames.MAP.EVENT_MAP_LOADED, mapId);\n      api.event.off(api.eventNames.LAYER.EVENT_ADD_LAYER, mapId);\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLegend(api.map(mapId).legend.createLegend({ layerIds: mapLayers, isRemoveable: false, canSetOpacity: true, canZoomTo: true }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mapLayers]);\n\n  return <div>{legend}</div>;\n}\n","/* eslint-disable react/require-default-props */\nimport { TypeWindow, getLocalizedValue, TypeTabs } from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the data grid footer component\n *\n * @returns {JSX.Element} created data grid footer component\n */\nexport function DataItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, ui, react } = cgpv;\n  const { Tabs } = ui.elements;\n\n  const { useState, useEffect } = react;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [dataLayers, setDataLayers] = useState<string[]>([]);\n\n  useEffect(() => {\n    setDataLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [api, mapId]);\n\n  setTimeout(() => {\n    dataLayers.forEach((layerId) => {\n      const layerSelection = document.getElementById(`${layerId}-groupLayerSelection`);\n      if (layerSelection) {\n        (layerSelection as HTMLSelectElement).addEventListener('change', function onChange(this) {\n          const { selectedIndex } = this;\n          const datagridTables = document.getElementsByClassName(`${layerId}-layer-datagrid-table`);\n          if (datagridTables.length > 0) {\n            for (let i = 0; i < datagridTables.length; i++) {\n              (datagridTables[i] as HTMLDivElement).setAttribute('style', `display:${i !== selectedIndex ? 'none' : 'block'}`);\n            }\n          }\n        });\n      }\n    });\n  }, 2000);\n  return (\n    <Tabs\n      tabsProps={{\n        variant: 'scrollable',\n      }}\n      tabs={dataLayers.map((layerId, index): TypeTabs => {\n        const geoviewLayerInstance = api.map(mapId).layer.geoviewLayers[layerId];\n        const labelValue = getLocalizedValue(geoviewLayerInstance.geoviewLayerName, mapId);\n        return {\n          value: index,\n          label: labelValue !== undefined ? labelValue : `data-${index}`,\n          content: () => api.map(mapId).dataGrid.createDataGrid({ layerId }),\n        };\n      })}\n    />\n  );\n}\n","import {\n  Cast,\n  AbstractPlugin,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypeJsonObject,\n  AnySchemaObject,\n  payloadIsAllQueriesDone,\n  TypeArrayOfFeatureInfoEntries,\n} from 'geoview-core';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-footer-panel.json';\nimport { DetailsItem } from './details-item';\nimport { LegendItem } from './legend-item';\nimport { DataItem } from './data-item';\n\nconst w = window as TypeWindow;\n\ntype CustomTabs = {\n  title: string;\n  contentHTML: string;\n};\n\n/**\n * Create a class for the plugin instance\n */\nclass FooterPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      legend: 'Legend',\n      details: 'Details',\n      dataGrid: 'Data',\n    },\n    fr: {\n      legend: 'Légende',\n      details: 'Détails',\n      dataGrid: 'Données',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n      const { displayLanguage, footerTabs, map } = api.map(mapId);\n\n      const mapContainer = map.getTargetElement().parentElement;\n      // Set size of map container based on whether footer-panel is collapsed or not\n      if (mapContainer) {\n        if (configObj?.collapsed === false) {\n          mapContainer.style.height = 'calc( 100% - 300px )';\n        } else {\n          mapContainer.style.height = 'calc( 100% - 55px )';\n        }\n      }\n\n      const defaultTabs = configObj?.tabs.defaultTabs as Array<string>;\n      let tabsCounter = 0;\n\n      if (defaultTabs.includes('legend')) {\n        // create new tab and add the LegendComponent to the footer tab\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].legend as string,\n          content: () => <LegendItem mapId={mapId} />,\n        });\n        tabsCounter++;\n      }\n\n      // create the listener to return the details\n      if (defaultTabs.includes('details')) {\n        // create new tab and add the DetailComponent to the footer tab\n        const detailsTabValue = tabsCounter;\n        footerTabs.createFooterTab({\n          value: detailsTabValue,\n          label: this.translations[displayLanguage].details as string,\n          content: () => <DetailsItem mapId={mapId} />,\n        });\n        tabsCounter++;\n        // select the details tab when map click queries are done\n        api.event.on(\n          api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\n          (payload) => {\n            if (payloadIsAllQueriesDone(payload)) {\n              const { resultSets } = payload;\n              let features: TypeArrayOfFeatureInfoEntries = [];\n              Object.keys(resultSets).forEach((layerPath) => {\n                features = features.concat(resultSets[layerPath]!);\n              });\n              if (features.length > 0) {\n                footerTabs.selectFooterTab(detailsTabValue);\n              }\n            }\n          },\n          `${mapId}/${mapId}-DetailsAPI`\n        );\n      }\n\n      if (defaultTabs.includes('data-grid')) {\n        /// create new tab and add the DataGridComponent to the footer tab\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].dataGrid as string,\n          content: () => <DataItem mapId={mapId} />,\n        });\n        tabsCounter++;\n      }\n\n      // TODO add custom detail reusable component when done\n\n      const customTabs = configObj?.tabs.customTabs as Array<string>;\n      for (let i = 0; i < customTabs.length; i++) {\n        const tab = customTabs[i] as unknown as CustomTabs;\n\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: tab.title,\n          content: tab.contentHTML,\n        });\n        tabsCounter++;\n      }\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    // const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      // const { api } = cgpv;\n      // TODO: Enable the footer tabs removal\n    }\n  }\n}\n\nexport default FooterPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['footer-panel'] = Cast<AbstractPlugin>(FooterPanelPlugin);\n"],"names":["w","window","DetailsItem","mapId","cgpv","api","react","useState","useEffect","details","setDetails","list","setList","lngLat","setLngLat","handlerName","setHandlerName","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","map","layer","registeredLayers","features","length","push","MAP","EVENT_MAP_SINGLE_CLICK","payloadIsAMapSingleClick","coordinates","lnglat","emit","markerDefinitionPayload","MARKER_ICON","EVENT_MARKER_ICON_SHOW","off","createDetails","location","setTimeout","LegendItem","legend","setLegend","mapLayers","setMapLayers","updateLayers","undefined","layerOrder","reverse","EVENT_MAP_LOADED","LAYER","EVENT_REMOVE_LAYER","payloadIsRemoveGeoViewLayer","orderedLayers","filter","layerId","geoviewLayer","geoviewLayerId","EVENT_ADD_LAYER","payloadIsALayerConfig","EVENT_LAYER_ADDED","layerConfig","createLegend","layerIds","isRemoveable","canSetOpacity","canZoomTo","DataItem","ui","Tabs","elements","dataLayers","setDataLayers","geoviewLayers","layerSelection","document","getElementById","addEventListener","selectedIndex","this","datagridTables","getElementsByClassName","i","setAttribute","tabsProps","variant","tabs","index","geoviewLayerInstance","labelValue","geoviewLayerName","value","label","content","dataGrid","createDataGrid","FooterPanelPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","fr","configObj","pluginProps","displayLanguage","footerTabs","mapContainer","getTargetElement","parentElement","collapsed","style","height","defaultTabs","tabsCounter","includes","createFooterTab","translations","detailsTabValue","concat","selectFooterTab","customTabs","tab","title","contentHTML","buttonPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}